<Page x:Class="Uno.Gallery.Views.Samples.LightweightStylingSamplePage"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:local="using:Uno.Gallery"
	  xmlns:ut="using:Uno.Themes"
	  xmlns:smtx="using:ShowMeTheXAML"
	  mc:Ignorable="d"
	  Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

	<Grid>
		<local:SamplePageLayout>
			<local:SamplePageLayout.MaterialTemplate>
				<DataTemplate>
					<StackPanel>
						<!-- Button -->
						<smtx:XamlDisplay UniqueKey="LightweightSamplePage_Button_Material"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default button style with a customized one, where the standard properties of foreground, background and border colors are overridden for different states (normal, pointer over, pressed, focused and disabled)."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="40">
								<Button Content="Default Button Style"
										Style="{StaticResource MaterialFilledButtonStyle}" />

								<Button Content="Overridden Button Style"
										BorderThickness="2"
										Style="{StaticResource MaterialFilledButtonStyle}">

									<Button.Resources>
										<SolidColorBrush x:Key="FilledButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="FilledButtonBackground"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="FilledButtonBorderBrush"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="FilledButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="FilledButtonBackgroundPointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="FilledButtonBorderBrushPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="FilledButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="FilledButtonBackgroundPressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="FilledButtonBorderBrushPressed"
														 Color="DarkBlue" />

										<SolidColorBrush x:Key="FilledButtonForegroundFocused"
														 Color="AntiqueWhite" />
										<SolidColorBrush x:Key="FilledButtonBackgroundFocused"
														 Color="DarkMagenta" />
										<SolidColorBrush x:Key="FilledButtonBorderBrushFocused"
														 Color="AntiqueWhite" />
									</Button.Resources>
								</Button>

								<Button Content="Default Button Style - Disabled"
										IsEnabled="False"
										Style="{StaticResource MaterialFilledButtonStyle}" />

								<Button Content="Overridden Button Style - Disabled"
										BorderThickness="2"
										IsEnabled="False"
										Style="{StaticResource MaterialFilledButtonStyle}">

									<Button.Resources>
										<SolidColorBrush x:Key="FilledButtonForegroundDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="FilledButtonBackgroundDisabled"
														 Color="DarkGray" />
										<SolidColorBrush x:Key="FilledButtonBorderBrushDisabled"
														 Color="LightSlateGray" />
									</Button.Resources>
								</Button>

							</StackPanel>
						</smtx:XamlDisplay>


						<!-- TextBox -->
						<smtx:XamlDisplay UniqueKey="LightWeightSamplePage_MaterialTextBox"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default Textbox style with a customized one, where the properties of placeholder foreground, foreground and border colors are overridden for different states (normal, pointer over, and focused)."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="24">
								<TextBox PlaceholderText="Default TextBox Style"
										 Style="{StaticResource MaterialOutlinedTextBoxStyle}" />

								<TextBox PlaceholderText="Overriden TextBox Style"
										 Style="{StaticResource MaterialOutlinedTextBoxStyle}">

									<TextBox.Resources>
										<!-- Normal State -->
										<SolidColorBrush x:Key="OutlinedTextBoxBorderBrush"
														 Color="Red" />
										<SolidColorBrush x:Key="OutlinedTextBoxPlaceholderForeground"
														 Color="Green" />
										<SolidColorBrush x:Key="OutlinedTextBoxForeground"
														 Color="Orange" />

										<!-- Focused state -->
										<SolidColorBrush x:Key="OutlinedTextBoxBorderBrushFocused"
														 Color="Lime" />
										<SolidColorBrush x:Key="OutlinedTextBoxPlaceholderForegroundFocused"
														 Color="Navy" />
										<SolidColorBrush x:Key="OutlinedTextBoxForegroundFocused"
														 Color="Pink" />

										<!-- Pointer over state -->
										<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundPointerOver" ResourceKey="SecondaryLowBrush" />
										<StaticResource x:Key="OutlinedTextBoxBorderBrushPointerOver" ResourceKey="SecondaryLowBrush" />
										<StaticResource x:Key="OutlinedTextBoxForegroundPointerOver" ResourceKey="PrimaryBrush" />
									</TextBox.Resources>
								</TextBox>
							</StackPanel>
						</smtx:XamlDisplay>

						<!-- CheckBox -->
						<smtx:XamlDisplay UniqueKey="LightWeightSamplePage_MaterialCheckBox"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default checkbox style with a customized one, where the glyph foreground, the background and border colors are overridden for different states (normal, pointer over, and pressed) when checked or unchecked."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="24">
								<CheckBox Content="Default checkbox style"
										  Style="{StaticResource MaterialCheckBoxStyle}" />
								<CheckBox Content="Overridden checkbox style"
										  Style="{StaticResource MaterialCheckBoxStyle}">
									<CheckBox.Resources>
										<!-- Checked state -->
										<SolidColorBrush x:Key="CheckBoxGlyphForegroundChecked"
														 Color="Red" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushChecked"
														 Color="Green" />
										<SolidColorBrush x:Key="CheckBoxBackgroundChecked"
														 Color="White" />

										<!-- Checked and pointer over state -->
										<SolidColorBrush x:Key="CheckBoxGlyphForegroundCheckedPointerOver"
														 Color="Blue" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushCheckedPointerOver"
														 Color="Yellow" />
										<SolidColorBrush x:Key="CheckBoxBackgroundCheckedPointerOver"
														 Color="Black" />

										<!-- Checked and pressed state -->
										<SolidColorBrush x:Key="CheckBoxGlyphForegroundPressed"
														 Color="Purple" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushCheckedPressed"
														 Color="Silver" />
										<SolidColorBrush x:Key="CheckBoxBackgroundCheckedPressed"
														 Color="Cyan" />

										<!-- Unchecked state -->
										<StaticResource x:Key="CheckBoxBorderBrushUnchecked" ResourceKey="SecondaryBrush" />
										<StaticResource x:Key="CheckBoxBackgroundUnchecked" ResourceKey="PrimaryLowBrush" />

										<!-- Unchecked and pressed state -->
										<SolidColorBrush x:Key="CheckBoxBorderBrushUncheckedPressed"
														 Color="Lime" />
										<SolidColorBrush x:Key="CheckBoxBackgroundUncheckedPressed"
														 Color="Navy" />

										<!-- Unchecked and pointer over state -->
										<SolidColorBrush x:Key="CheckBoxBorderBrushUncheckedPointerOver"
														 Color="Maroon" />
										<SolidColorBrush x:Key="CheckBoxBackgroundUncheckedPointerOver"
														 Color="Olive" />
									</CheckBox.Resources>
								</CheckBox>

							</StackPanel>
						</smtx:XamlDisplay>

						<!-- RadioButton -->
						<smtx:XamlDisplay UniqueKey="LightweightSamplePage_RadioButton_Material"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default radio button style with a customized one, where the standard properties of foreground, ellipse and ellipse fill colors are overridden for different states (normal, pointer over, pressed and disabled)."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="40">
								<RadioButton GroupName="RadioButton_Material_A"
											 Content="Default Radio Button Style - Unchecked"
											 Style="{StaticResource MaterialRadioButtonStyle}" />

								<RadioButton GroupName="RadioButton_Material_A"
											 IsChecked="True"
											 Content="Default Radio Button Style - Checked"
											 Style="{StaticResource MaterialRadioButtonStyle}" />

								<RadioButton GroupName="RadioButton_Material_A"
											 Content="Default Radio Button Style - Disabled"
											 IsEnabled="False"
											 Style="{StaticResource MaterialRadioButtonStyle}" />

								<RadioButton GroupName="RadioButton_Material_B"
											 Content="Overridden Radio Button Style - Unchecked"
											 Style="{StaticResource MaterialRadioButtonStyle}">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStroke"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStroke"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFill"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="RadioButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="RadioButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPressed"
														 Color="DarkBlue" />
									</RadioButton.Resources>
								</RadioButton>

								<RadioButton GroupName="RadioButton_Material_B"
											 IsChecked="True"
											 Content="Overridden Radio Button Style - Checked"
											 Style="{StaticResource MaterialRadioButtonStyle}">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStroke"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStroke"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFill"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="RadioButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="RadioButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPressed"
														 Color="DarkBlue" />
									</RadioButton.Resources>
								</RadioButton>

								<RadioButton GroupName="RadioButton_Material_B"
											 Content="Overridden Radio Button Style - Disabled"
											 IsEnabled="False"
											 Style="{StaticResource MaterialRadioButtonStyle}">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForegroundDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokeDisabled"
														 Color="DarkGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokeDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillDisabled"
														 Color="LightSlateGray" />
									</RadioButton.Resources>
								</RadioButton>
							</StackPanel>
						</smtx:XamlDisplay>
					</StackPanel>
				</DataTemplate>
			</local:SamplePageLayout.MaterialTemplate>
			<local:SamplePageLayout.FluentTemplate>
				<DataTemplate>
					<StackPanel Spacing="20">
						<!-- Button -->
						<smtx:XamlDisplay UniqueKey="LightweightSamplePage_Button_Fluent"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default button style with a customized one, where the standard properties of foreground, background and border colors are overridden for different states (normal, pointer over, pressed and disabled)."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="40">
								<Button Content="Default Button Style" />

								<Button Content="Overridden Button Style"
										BorderThickness="2">

									<Button.Resources>
										<SolidColorBrush x:Key="ButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="ButtonBackground"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="ButtonBorderBrush"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="ButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="ButtonBackgroundPointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="ButtonBorderBrushPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="ButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="ButtonBackgroundPressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="ButtonBorderBrushPressed"
														 Color="DarkBlue" />
									</Button.Resources>
								</Button>

								<Button Content="Default Button Style - Disabled"
										IsEnabled="False" />

								<Button Content="Overridden Button Style - Disabled"
										BorderThickness="2"
										IsEnabled="False">

									<Button.Resources>
										<SolidColorBrush x:Key="ButtonForegroundDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="ButtonBackgroundDisabled"
														 Color="DarkGray" />
										<SolidColorBrush x:Key="ButtonBorderBrushDisabled"
														 Color="LightSlateGray" />
									</Button.Resources>
								</Button>

							</StackPanel>
						</smtx:XamlDisplay>
						<smtx:XamlDisplay UniqueKey="LightWeightSamplePage_FluentTextBox"
										  smtx:XamlDisplayExtensions.Description="The example below compares a default Textbox style with a customized one, where the properties of Foreground, and background colors are overridden for different states (normal, pointer over, and focused).."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="24">
								<TextBox PlaceholderText="Default TextBox Style" />

								<TextBox PlaceholderText="Overriden TextBox Style">

									<TextBox.Resources>
										<!-- Default State -->
										<SolidColorBrush x:Key="TextControlForeground"
														 Color="Red" />
										<SolidColorBrush x:Key="TextControlBackground"
														 Color="Cyan" />

										<!-- Pointer Over State -->
										<SolidColorBrush x:Key="TextControlButtonBackgroundPointerOver"
														 Color="Orange" />
										<SolidColorBrush x:Key="TextControlBackgroundPointerOver"
														 Color="Navy" />
										<SolidColorBrush x:Key="TextControlForegroundPointerOver"
														 Color="Gray" />

										<!-- Focused State -->
										<SolidColorBrush x:Key="TextControlForegroundFocused"
														 Color="Yellow" />
										<SolidColorBrush x:Key="TextControlBackgroundFocused"
														 Color="RosyBrown" />
									</TextBox.Resources>
								</TextBox>
							</StackPanel>
						</smtx:XamlDisplay>

						<!-- CheckBox -->
						<smtx:XamlDisplay UniqueKey="LightWeightSamplePage_FluentCheckBox"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default checkbox style with a customized one, where the glyph foreground, the background and border colors are overridden for different states (normal, pointer over, and pressed) when checked or unchecked."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="24">
								<CheckBox Content="Default checkbox style"
										  BorderThickness="2" />
								<CheckBox Content="Overridden checkbox style"
										  BorderThickness="2">
									<CheckBox.Resources>
										<!-- Checked state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundChecked"
														 Color="Teal" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushChecked"
														 Color="Navy" />
										<SolidColorBrush x:Key="CheckBoxBackgroundChecked"
														 Color="Maroon" />

										<!-- Checked and pointer over state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundCheckedPointerOver"
														 Color="Lime" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushCheckedPointerOver"
														 Color="Olive" />
										<SolidColorBrush x:Key="CheckBoxBackgroundCheckedPointerOver"
														 Color="Silver" />

										<!-- Checked and pressed state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundCheckedPressed"
														 Color="Purple" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushCheckedPressed"
														 Color="Aqua" />
										<SolidColorBrush x:Key="CheckBoxBackgroundCheckedPressed"
														 Color="Yellow" />

										<!-- Unchecked state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundUnchecked"
														 Color="Black" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushUnchecked"
														 Color="White" />
										<SolidColorBrush x:Key="CheckBoxBackgroundUnchecked"
														 Color="Gray" />

										<!-- Unchecked and pointer over state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundUncheckedPointerOver"
														 Color="Blue" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushUncheckedPointerOver"
														 Color="Orange" />
										<SolidColorBrush x:Key="CheckBoxBackgroundUncheckedPointerOver"
														 Color="Green" />

										<!-- Unchecked and pressed state -->
										<SolidColorBrush x:Key="CheckBoxCheckGlyphForegroundUncheckedPressed"
														 Color="Red" />
										<SolidColorBrush x:Key="CheckBoxBorderBrushUncheckedPressed"
														 Color="Cyan" />
										<SolidColorBrush x:Key="CheckBoxBackgroundUncheckedPressed"
														 Color="Pink" />
									</CheckBox.Resources>
								</CheckBox>
							</StackPanel>
						</smtx:XamlDisplay>

						<!-- RadioButton -->
						<smtx:XamlDisplay UniqueKey="LightweightSamplePage_RadioButton_Fluent"
										  smtx:XamlDisplayExtensions.Description="The example below contrasts a default radio button style with a customized one, where the standard properties of foreground, ellipse and ellipse fill colors are overridden for different states (normal, pointer over, pressed and disabled)."
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel">
							<StackPanel Spacing="40">
								<RadioButton GroupName="RadioButton_Material_A"
											 Content="Default Radio Button Style - Unchecked" />

								<RadioButton GroupName="RadioButton_Material_A"
											 IsChecked="True"
											 Content="Default Radio Button Style - Checked" />

								<RadioButton GroupName="RadioButton_Material_A"
											 Content="Default Radio Button Style - Disabled"
											 IsEnabled="False" />

								<RadioButton GroupName="RadioButton_Material_B"
											 Content="Overridden Radio Button Style - Unchecked">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStroke"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStroke"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFill"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFill"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="RadioButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFillPointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="RadioButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFillPressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPressed"
														 Color="DarkBlue" />
									</RadioButton.Resources>
								</RadioButton>

								<RadioButton GroupName="RadioButton_Material_B"
											 IsChecked="True"
											 Content="Overridden Radio Button Style - Checked">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForeground"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStroke"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStroke"
														 Color="DarkGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFill"
														 Color="LightGreen" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFill"
														 Color="DarkGreen" />

										<SolidColorBrush x:Key="RadioButtonForegroundPointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePointerOver"
														 Color="DarkRed" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFillPointerOver"
														 Color="LightPink" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPointerOver"
														 Color="DarkRed" />

										<SolidColorBrush x:Key="RadioButtonForegroundPressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokePressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokePressed"
														 Color="DarkBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFillPressed"
														 Color="LightSteelBlue" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillPressed"
														 Color="DarkBlue" />
									</RadioButton.Resources>
								</RadioButton>

								<RadioButton GroupName="RadioButton_Material_B"
											 Content="Overridden Radio Button Style - Disabled"
											 IsEnabled="False">
									<RadioButton.Resources>
										<SolidColorBrush x:Key="RadioButtonForegroundDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseStrokeDisabled"
														 Color="DarkGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedStrokeDisabled"
														 Color="LightSlateGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseFillDisabled"
														 Color="DarkGray" />
										<SolidColorBrush x:Key="RadioButtonOuterEllipseCheckedFillDisabled"
														 Color="LightSlateGray" />
									</RadioButton.Resources>
								</RadioButton>
							</StackPanel>
						</smtx:XamlDisplay>
					</StackPanel>
				</DataTemplate>
			</local:SamplePageLayout.FluentTemplate>
		</local:SamplePageLayout>
	</Grid>
</Page>
