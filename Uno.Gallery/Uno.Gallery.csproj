<Project Sdk="Uno.Sdk">
	<PropertyGroup>
		<!-- Building with dotnet build -f net8.0-platform will still cause restore to happen for all TargetFrameworks -->
		<!-- which will force us to install all workloads even if not needed -->
		<!-- To prevent that, we will pass TargetFrameworkOverride as a global property (i.e, dotnet build -p:TargetFrameworkOverride=net8.0-platform) -->
		<!-- That way, we set TargetFrameworks property to only the needed TargetFramework -->
		<!-- NOTE: We cannot build with dotnet build -p:TargetFrameworks=net8.0-platform as that will flow to source generator project, which is incorrect -->
		<TargetFramework Condition="'$(TargetFrameworkOverride)'!=''">$(TargetFrameworkOverride)</TargetFramework>
		<TargetFrameworks Condition="'$(TargetFrameworkOverride)'==''">
			net8.0-ios;
			net8.0-maccatalyst;
			net8.0-windows10.0.19041;
			net8.0-desktop;
			net8.0-browserwasm;
		</TargetFrameworks>

		<!-- android is disable on linux until ci is fixed  -->
		<TargetFrameworks Condition="'$(TargetFrameworkOverride)'=='' AND !$([MSBuild]::IsOSPlatform('linux'))">$(TargetFrameworks);net8.0-android;</TargetFrameworks>
		
		<OutputType>Exe</OutputType>
		<UnoSingleProject>true</UnoSingleProject>
		<!-- Display name -->
		<ApplicationTitle>Gallery</ApplicationTitle>
		<!-- App Identifier -->
		<ApplicationId>com.companyname.Gallery</ApplicationId>
		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>
		<WindowsSdkPackageVersion>10.0.19041.38</WindowsSdkPackageVersion> 
		<!--
		If you encounter this error message:

		error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
		Please update to a newer .NET SDK in order to reference this assembly.

		This means that the two packages below must be aligned with the "build" version number of
		the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
		must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
		-->
		<!-- <WindowsSdkPackageReference>10.0.22621.28</WindowsSdkPackageReference> -->
		<!--
		UnoFeatures let's you quickly add and manage implicit package references based on the features you want to use.
		https://aka.platform.uno/singleproject-features
		-->
		<UnoFeatures>
			Material;
			MediaElement;
			Toolkit;
			Cupertino;
			Lottie;
			Skia;
			Svg;
			Logging;
			Extensions;
		</UnoFeatures>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)'=='Debug' or '$(IsUiAutomationMappingEnabled)'=='True'">
		<IsUiAutomationMappingEnabled>True</IsUiAutomationMappingEnabled>
		<DefineConstants>$(DefineConstants);USE_UITESTS</DefineConstants>
	</PropertyGroup>
	<ItemGroup>
		<PackageReference Include="Uno.ShowMeTheXAML" />
		<PackageReference Include="Uno.ShowMeTheXAML.MSBuild" />
		<PackageReference Include="Microsoft.Extensions.Logging" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" />
		<PackageReference Include="Uno.Core.Extensions.Disposables" />
		<PackageReference Include="Uno.Core.Extensions.Compatibility" />
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="..\Uno.Gallery.SourceGenerators\Uno.Gallery.SourceGenerators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" SetPlatform="Platform=AnyCPU" />
	</ItemGroup>

	<ItemGroup Condition="
			   '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'android'
			   or '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'ios'
			   or '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'maccatayst'">
		<IncludeXamlNamespaces Include="mobile" Visible="False" />
		<ExcludeXamlNamespaces Include="not_mobile" Visible="False" />
	</ItemGroup>
	<ItemGroup Condition="'$(TargetFramework)'=='net8.0-desktop' OR '$(TargetFramework)'=='net8.0-browserwasm'">
		<IncludeXamlNamespaces Include="not_mobile" Visible="False" />
		<ExcludeXamlNamespaces Include="mobile" Visible="False" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release' and '$(System_PullRequest_IsFork)'!='True' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'ios' ">
		<CodesignKey>iPhone Distribution</CodesignKey>
		<RuntimeIdentifier>ios-arm64</RuntimeIdentifier>
	</PropertyGroup>

	<ItemGroup Condition="('$(Configuration)'=='Debug' or '$(IsUiAutomationMappingEnabled)'=='True') and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'ios' ">
		<PackageReference Include="Xamarin.TestCloud.Agent" />
	</ItemGroup>

	<PropertyGroup Condition=" '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'browserwasm' ">
		<WasmShellWebAppBasePath>/</WasmShellWebAppBasePath>
	</PropertyGroup>

	<PropertyGroup Condition=" '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'browserwasm' AND '$(Configuration)' == 'Release' ">
		<WasmShellMonoRuntimeExecutionMode>InterpreterAndAOT</WasmShellMonoRuntimeExecutionMode>
		<WasmShellEmccLinkOptimization>false</WasmShellEmccLinkOptimization>
		<WasmShellEnableEmccProfiling>true</WasmShellEnableEmccProfiling>
		<UnoXamlResourcesTrimming>true</UnoXamlResourcesTrimming>

		<!--
		Uncomment this block to generate a profile
		<WasmShellGenerateAOTProfile>true</WasmShellGenerateAOTProfile>
		<WasmShellILLinkerEnabled>false</WasmShellILLinkerEnabled>
		<UnoXamlResourcesTrimming>false</UnoXamlResourcesTrimming>
		<WasmShellEnableJiterpreter>false</WasmShellEnableJiterpreter>
		-->
	</PropertyGroup>
	
	<PropertyGroup Condition="'$(Configuration)'=='Release' and '$(System_PullRequest_IsFork)'!='True' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'maccatalyst' ">
		<MtouchUseLlvm>true</MtouchUseLlvm>
		<CodeSigningKey>Apple Distribution: Uno Platform Inc. (PD74CHS9Z5)</CodeSigningKey>
		<PackageSigningKey>3rd Party Mac Developer Installer</PackageSigningKey>
		<CreatePackage>true</CreatePackage>
		<EnablePackageSigning>true</EnablePackageSigning>
		<EnableCodeSigning>true</EnableCodeSigning>
		<CodeSignEntitlements>MacCatalyst\Entitlements.plist</CodeSignEntitlements>

		<CodesignProvision>Uno Gallery (Catalyst)</CodesignProvision>
		<CodesignProvision Condition="$(BUILD_SOURCEBRANCH.StartsWith('refs/heads/canaries'))">Uno Gallery Canary (Catalyst)</CodesignProvision>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release' and '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'android'">
		<RunAOTCompilation>true</RunAOTCompilation>
	</PropertyGroup>

	<ItemGroup Condition="'$(TargetFramework)'!='net8.0-windows10.0.19041'">
		<PackageReference Include="Uno.CommunityToolkit.WinUI.UI.Controls" />
		<PackageReference Include="Uno.CommunityToolkit.WinUI.UI.Controls.DataGrid" />
	</ItemGroup>

	<ItemGroup Condition="'$(TargetFramework)'=='net8.0-windows10.0.19041'">
		<PackageReference Include="CommunityToolkit.WinUI.Lottie" />
		<PackageReference Include="CommunityToolkit.WinUI.UI.Controls" />
		<PackageReference Include="CommunityToolkit.WinUI.UI.Controls.DataGrid" />
		<PackageReference Include="VideoLAN.LibVLC.Windows" />
		<PackageReference Include="nventive.Nimue.Application.Packaging">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup Condition=" '$([MSBuild]::GetTargetPlatformIdentifier($(TargetFramework)))' == 'browserwasm' ">
		<PackageReference Include="Microsoft.TypeScript.Compiler">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.TypeScript.MSBuild">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
		</PackageReference>
		
		<EmbeddedResource Include="Platforms\WebAssembly\WasmScripts\UnoGallery.js" />
		
		<ConfigFiles Include="Platforms\WebAssembly\tsconfig.json" />
		
		<WasmShellMonoEnvironment Include="MONO_GC_PARAMS" Value="soft-heap-limit=512m,nursery-size=64m,evacuation-threshold=66,major=marksweep" />
	</ItemGroup>
	
	<PropertyGroup Condition="'$(Configuration)'=='Release' and '$(WasmShellMonoRuntimeExecutionMode)'=='InterpreterAndAOT'">
		<WasmAotFileName Condition="'$(IsUiAutomationMappingEnabled)'==''">aot.profile</WasmAotFileName>

		<!--
		Use smaller profile for UI tests to avoid the browser's memory
		use to go higher than the Ci agent's availability
		-->

		<WasmAotFileName Condition="'$(IsUiAutomationMappingEnabled)'=='True'">aot-uitests.profile</WasmAotFileName>
	</PropertyGroup>


	<!-- https://github.com/dotnet/runtime/issues/109289 -->
	<Target Name="Issue109289_Workaround" AfterTargets="_BrowserWasmWriteRspForLinking" Condition=" $(NETCoreSdkVersion.Contains('rc.2')) ">
		<ItemGroup>
			<_WasmLinkStepArgs Remove="@(_EmccLinkStepArgs)" />
			<_EmccLinkStepArgs Remove="&quot;%(_WasmNativeFileForLinking.Identity)&quot;" />
			<_WasmLinkDependencies Remove="@(_WasmNativeFileForLinking)" />

			<_SkiaSharpToReorder Include="@(_WasmNativeFileForLinking)" Condition="$([System.String]::Copy('%(FullPath)').Contains('SkiaSharp'))" />
			<_WasmNativeFileForLinking Remove="@(_SkiaSharpToReorder)" />
			<_WasmNativeFileForLinking Include="@(_SkiaSharpToReorder)" />

			<_EmccLinkStepArgs Include="&quot;%(_WasmNativeFileForLinking.Identity)&quot;" />
			<_WasmLinkDependencies Include="@(_WasmNativeFileForLinking)" />
			<_WasmLinkStepArgs Include="@(_EmccLinkStepArgs)" />
		</ItemGroup>
	</Target>
</Project>
