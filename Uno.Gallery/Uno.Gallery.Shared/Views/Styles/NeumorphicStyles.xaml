<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:utu="using:Uno.Toolkit.UI"
					xmlns:converters="using:Uno.Gallery.Converters"
					xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:um="using:Uno.Material"
					mc:Ignorable="d">

	<!--#region Shadow ThemeDictionaries-->
	<ResourceDictionary.ThemeDictionaries>
		<ResourceDictionary x:Key="Dark">
			<!-- Workaround for OutlineVariantBrush not found in the NeumorphicColorPaletteOverride -->
			<SolidColorBrush x:Key="OutlineVariantBrush"
							 Color="{ThemeResource OutlineVariantColor}" />
			<SolidColorBrush x:Key="OutlineVariantBrushDisabledBrush"
							 Color="{ThemeResource OutlineVariantColor}"
							 Opacity="0.12" />

			<!-- Shadow colors -->
			<Color x:Key="LightShadowColor">#3C3846</Color>
			<Color x:Key="ShadeShadowColor">#24222A</Color>

			<!-- How are we dealing with the color names? -->

			<!-- Some colors are only exist and are different on dark mode, ie Elevated Button -->
			<!-- So we don't have a corresponding color for light mode -->
			<Color x:Key="LightShadowColor2">#615B71</Color>
			<Color x:Key="ShadeShadowColor2">#000000</Color>

			<Color x:Key="LightShadowColor3">#5F5B69</Color>
			<Color x:Key="ShadeShadowColor3">#24222A</Color>

			<!-- For ToggleButton/IconButton it has a corresponding in Light Theme -->
			<Color x:Key="LightShadowColor4">#79718E</Color>
			<Color x:Key="ShadeShadowColor4">#000000</Color>

			<Color x:Key="LightShadowColor5">#E5DCFF</Color>
			<Color x:Key="ShadeShadowColor5">#A9A2D9</Color>

			<Color x:Key="LightShadowColor6">#F7F5FF</Color>
			<Color x:Key="ShadeShadowColor6">#584AB5</Color>

			<!-- Corresponding to Light Used for FABTabBarItem -->
			<Color x:Key="LightShadowColor7">#A9A2D9</Color>
			<Color x:Key="MediumShadowColor7">#24222A</Color>
			<Color x:Key="ShadeShadowColor7">#000000</Color>

			<Color x:Key="LightShadowColor8">#FFFFFF</Color>
			<Color x:Key="MediumShadowColor8">#615B71</Color>
			<Color x:Key="ShadeShadowColor8">#000000</Color>
			<Color x:Key="VariantShadowColor8">#9B92D3</Color>

			<Color x:Key="LightShadowColor9">#615B71</Color>
			<Color x:Key="ShadeShadowColor9">#000000</Color>

			<Color x:Key="LightShadowColor10">#ECE5FF</Color>
			<Color x:Key="ShadeShadowColor10">#9B92D3</Color>

			<Color x:Key="LightShadowColor11">#18171C</Color>
			<Color x:Key="ShadeShadowColor11">#000000</Color>


			<!-- TextBox -->
			<utu:ShadowCollection x:Key="TextBoxShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Opacity="0.4" Spread="0" IsInner="True" Color="{StaticResource ShadeShadowColor2}" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Opacity="0.4" Spread="0" IsInner="True" Color="{StaticResource LightShadowColor2}" />
			</utu:ShadowCollection>

			<!-- ToggleButton -->
			<utu:ShadowCollection x:Key="ToggleButtonShadows">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!-- IconButton -->
			<utu:ShadowCollection x:Key="IconButtonShadows">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!-- CheckBox -->
			<!-- note: 1st shadow's opacity in Hover,Focused,Pressed is calculated from (attached element opacity: [0.08 or 0.12])*(shadow color alpha: 1.0) -->
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="Transparent" Opacity="0" IsInner="False">
					<!-- workaround: invisible shadow to prevent major layout difference between states -->
				</utu:Shadow>
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxFocusedShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#C7BFFE" Opacity="0.12" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxHoverShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#C7BFFE" Opacity="0.08" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxPressedShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#C7BFFE" Opacity="0.12" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxDisabledShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="Transparent" Opacity="0" IsInner="False">
					<!-- workaround: invisible shadow to prevent major layout difference between states -->
				</utu:Shadow>
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>

			<!-- RadioButton -->
			<utu:ShadowCollection x:Key="NeumorphicRadioButtonShadows">
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor2}" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" IsInner="False" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="NeumorphicRadioButtonStateShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Opacity="1" Spread="8" Color="{ThemeResource PrimaryColor}" IsInner="False" />
			</utu:ShadowCollection>

			<!-- ComboBox -->
			<utu:ShadowCollection x:Key="ComboboxShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#615B71" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#000000" Opacity="0.4" IsInner="True" />
			</utu:ShadowCollection>

			<!-- TabBar -->
			<utu:ShadowCollection x:Key="TabBarShadows">
				<utu:Shadow BlurRadius="48" IsInner="False" OffsetX="-8" OffsetY="-16" Opacity="0.4" Spread="4" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="32" IsInner="False" OffsetX="8" OffsetY="8" Opacity="0.4" Spread="4" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ContentTabBarShadows">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="4" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="4" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!-- TabBarItem -->
			<utu:ShadowCollection x:Key="TabBarItemShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor4}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FabTabBarItemShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.2" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
			</utu:ShadowCollection>

			<!-- Elevated Button Shadows -->
			<utu:ShadowCollection x:Key="ElevatedButtonNormalShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#000000" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#615B71" Opacity="0.6" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonHoveredShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#000000" Opacity="0.5" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#79718E" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonPressedShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#79718E" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#000000" Opacity="0.4" IsInner="True" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonDisabledShadows">
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#24222A" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#5F5B69" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonFocusedShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#000000" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#79718E" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="48" Spread="0" Color="#000000" Opacity="0.2" IsInner="True" />
			</utu:ShadowCollection>

			<!-- Filled Button Shadows -->
			<utu:ShadowCollection x:Key="FilledButtonNormalShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#A9A2D9" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#E5DCFF" Opacity="0.6" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonHoveredShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#A9A2D9" Opacity="0.7" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#E5DCFF" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonPressedShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#E5DCFF" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#A9A2D9" Opacity="0.6" IsInner="True" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonDisabledShadows">
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#A9A2D9" Opacity="1" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#E5DCFF" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonFocusedShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#A9A2D9" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#E5DCFF" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="48" Spread="0" Color="#A9A2D9" Opacity="0.6" IsInner="True" />
			</utu:ShadowCollection>

			<!-- FAB -->
			<utu:ShadowCollection x:Key="FabShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.2" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
			</utu:ShadowCollection>

			<!-- Chips -->
			<utu:ShadowCollection x:Key="ChipShadows">
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#000000" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#615B71" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ChipSelectedShadows">
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#F7F5FF" Opacity="0.9" IsInner="True" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#584AB5" Opacity="0.9" IsInner="True" />
			</utu:ShadowCollection>

			<!-- Slider -->
			<utu:ShadowCollection x:Key="SliderTrackRectShadows">
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor9}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor9}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderDecreaseRectShadows">
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="2" OffsetY="2" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor10}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-2" OffsetY="-2" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor10}" />
			</utu:ShadowCollection>

			<SolidColorBrush x:Key="ThumbBackgroundDisabledBrush"
							 Color="#4A4751" />

			<utu:ShadowCollection x:Key="SliderThumbShadows">
				<utu:Shadow BlurRadius="16" IsInner="True" OffsetX="0" OffsetY="0" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor11}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="0" OffsetY="4" Opacity="0.18" Spread="0" Color="{StaticResource ShadeShadowColor11}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderThumbStateShadow">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="0" OffsetY="0" Opacity="1" Spread="8" Color="{StaticResource PrimaryColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderThumbDisabledShadow">
				<utu:Shadow BlurRadius="1" IsInner="False" OffsetX="0" OffsetY="1" Opacity="0.24" Spread="0" Color="{StaticResource ShadeShadowColor11}" />
			</utu:ShadowCollection>

			<!-- ToggleSwitch -->
			<utu:ShadowCollection x:Key="ToggleSwitchOffBorderShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="2" Color="{StaticResource ShadeShadowColor2}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.8" Spread="4" Color="{StaticResource LightShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchOnBorderShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="2" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.6" Spread="2" Color="{StaticResource LightShadowColor8}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchKnobOffShadows">
				<utu:Shadow BlurRadius="2" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.2" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="1" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-2" OffsetY="2" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor8}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchKnobOnShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="-2" OffsetY="4" Opacity="0.8" Spread="0" Color="{StaticResource MediumShadowColor8}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="0" OffsetY="4" Opacity="0.25" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="0" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="1" IsInner="False" OffsetX="-1" OffsetY="0" Opacity="1" Spread="1" Color="{StaticResource VariantShadowColor8}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchOnBorderDisabledShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="2" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.6" Spread="2" Color="{StaticResource LightShadowColor8}" />
			</utu:ShadowCollection>

		</ResourceDictionary>
		<ResourceDictionary x:Key="Light">

			<!-- Workaround for OutlineVariantBrush not found in the NeumorphicColorPaletteOverride -->
			<SolidColorBrush x:Key="OutlineVariantBrush"
							 Color="{ThemeResource OutlineVariantColor}" />
			<SolidColorBrush x:Key="OutlineVariantBrushDisabledBrush"
							 Color="{ThemeResource OutlineVariantColor}"
							 Opacity="0.12" />

			<!-- How are we dealing with the color names? -->
			<!-- Shadow colors -->
			<Color x:Key="LightShadowColor">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor">#AEAEC0</Color>

			<Color x:Key="LightShadowColor2">#6651F2</Color>
			<Color x:Key="ShadeShadowColor2">#4C3CB3</Color>

			<!-- For ToggleButton/IconButton it has a corresponding in Dark Theme -->
			<Color x:Key="LightShadowColor4">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor4">#AEAEC0</Color>

			<Color x:Key="LightShadowColor5">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor5">#584A7F</Color>

			<Color x:Key="LightShadowColor6">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor6">#413399</Color>

			<!-- Corresponding to Dark Used for FABTabBarItem -->
			<Color x:Key="LightShadowColor7">#FFFFFF</Color>
			<Color x:Key="MediumShadowColor7">#AEAEC0</Color>
			<Color x:Key="ShadeShadowColor7">#170065</Color>

			<Color x:Key="LightShadowColor8">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor8">#000000</Color>

			<Color x:Key="LightShadowColor9">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor9">#C8C7D1</Color>

			<Color x:Key="LightShadowColor10">#6651F2</Color>
			<Color x:Key="ShadeShadowColor10">#4C3CB3</Color>

			<Color x:Key="LightShadowColor11">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor11">#000000</Color>

			<!-- TextBox -->
			<utu:ShadowCollection x:Key="TextBoxShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="4" Opacity="0.4" Spread="0" IsInner="True" Color="{StaticResource ShadeShadowColor}" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="4" Opacity="0.4" Spread="0" IsInner="True" Color="{StaticResource LightShadowColor}" />
			</utu:ShadowCollection>

			<!-- ToggleButton -->
			<utu:ShadowCollection x:Key="ToggleButtonShadows">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!-- IconButton -->
			<utu:ShadowCollection x:Key="IconButtonShadows">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!-- CheckBox -->
			<!-- note: 1st shadow's opacity in Hover,Focused,Pressed is calculated from (attached element opacity: [0.08 or 0.12])*(shadow color alpha: 1.0) -->
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="Transparent" Opacity="0" IsInner="False">
					<!-- workaround: invisible shadow to prevent major layout difference between states -->
				</utu:Shadow>
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="2" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="2" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxFocusedShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#5845CF" Opacity="0.12" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxHoverShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#5845CF" Opacity="0.08" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxPressedShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="#5845CF" Opacity="0.12" IsInner="False" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="NeumorphicCheckBoxDisabledShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Spread="8" Color="Transparent" Opacity="0" IsInner="False">
					<!-- workaround: invisible shadow to prevent major layout difference between states -->
				</utu:Shadow>
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="2" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="2" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>

			<!-- RadioButton -->
			<utu:ShadowCollection x:Key="NeumorphicRadioButtonShadows">
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="2" Opacity="1" Spread="0" IsInner="False" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="2" Opacity="0.6" Spread="0" IsInner="False" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="NeumorphicRadioButtonStateShadows">
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="8" Opacity="1" Spread="8" Color="{ThemeResource PrimaryColor}" IsInner="False" />
			</utu:ShadowCollection>

			<!-- ComboBox -->
			<utu:ShadowCollection x:Key="ComboboxShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.4" IsInner="True" />
			</utu:ShadowCollection>

			<!-- TabBar -->
			<utu:ShadowCollection x:Key="TabBarShadows">
				<utu:Shadow BlurRadius="48" IsInner="False" OffsetX="-8" OffsetY="-16" Opacity="0.6" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="32" IsInner="False" OffsetX="8" OffsetY="8" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ContentTabBarShadows">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<!-- TabBarItem -->
			<utu:ShadowCollection x:Key="TabBarItemShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FabTabBarItemShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.08" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
			</utu:ShadowCollection>

			<!-- Elevated Button Shadows -->
			<utu:ShadowCollection x:Key="ElevatedButtonNormalShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#AEAEC0" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#FFFFFF" Opacity="0.6" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonHoveredShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#AEAEC0" Opacity="0.5" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#FFFFFF" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonPressedShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#FFFFFF" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#AEAEC0" Opacity="0.4" IsInner="True" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonDisabledShadows">
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ElevatedButtonFocusedShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#AEAEC0" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#FFFFFF" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="48" Spread="0" Color="#AEAEC0" Opacity="0.2" IsInner="True" />
			</utu:ShadowCollection>

			<!-- Filled Button Shadows -->
			<utu:ShadowCollection x:Key="FilledButtonNormalShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#4C3CB3" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#6651F2" Opacity="0.6" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonHoveredShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#4C3CB3" Opacity="0.7" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#6651F2" Opacity="0.5" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonPressedShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#6651F2" Opacity="0.6" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#4C3CB3" Opacity="0.6" IsInner="True" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonDisabledShadows">
				<d:Legacy>
					<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor2}" />
					<!-- Opacity of 16% seems closer to the Figma design. Original is 100% -->
					<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="0.16" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
				</d:Legacy>
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#4C3CB3" Opacity="1" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#6651F2" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="FilledButtonFocusedShadows">
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="16" Spread="0" Color="#4C3CB3" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="16" Spread="0" Color="#6651F2" Opacity="0.4" IsInner="False" />
				<utu:Shadow OffsetX="0" OffsetY="0" BlurRadius="48" Spread="0" Color="#4C3CB3" Opacity="0.6" IsInner="True" />
			</utu:ShadowCollection>

			<!-- FAB -->
			<utu:ShadowCollection x:Key="FabShadows">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.08" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
			</utu:ShadowCollection>

			<!-- Chips -->
			<utu:ShadowCollection x:Key="ChipShadows">
				<utu:Shadow OffsetX="1" OffsetY="1" BlurRadius="4" Spread="0" Color="#AEAEC0" Opacity="0.6" IsInner="False" />
				<utu:Shadow OffsetX="-1" OffsetY="-1" BlurRadius="4" Spread="0" Color="#FFFFFF" Opacity="1" IsInner="False" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ChipSelectedShadows">
				<utu:Shadow OffsetX="-4" OffsetY="-4" BlurRadius="8" Spread="0" Color="#8271F4" Opacity="1" IsInner="True" />
				<utu:Shadow OffsetX="4" OffsetY="4" BlurRadius="8" Spread="0" Color="#4C3CB3" Opacity="1" IsInner="True" />
			</utu:ShadowCollection>

			<!-- Slider -->
			<utu:ShadowCollection x:Key="SliderTrackRectShadows">
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor9}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor9}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderDecreaseRectShadows">
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="2" OffsetY="2" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor10}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-2" OffsetY="-2" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor10}" />
			</utu:ShadowCollection>

			<SolidColorBrush x:Key="ThumbBackgroundDisabledBrush"
							 Color="#D1D1D4" />

			<utu:ShadowCollection x:Key="SliderThumbShadows">
				<utu:Shadow BlurRadius="16" IsInner="True" OffsetX="0" OffsetY="0" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor11}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="0" OffsetY="4" Opacity="0.18" Spread="0" Color="{StaticResource ShadeShadowColor11}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderThumbStateShadow">
				<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="0" OffsetY="0" Opacity="1" Spread="8" Color="{StaticResource PrimaryColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="SliderThumbDisabledShadow">
				<utu:Shadow BlurRadius="1" IsInner="False" OffsetX="0" OffsetY="1" Opacity="0.24" Spread="0" Color="{StaticResource ShadeShadowColor11}" />
			</utu:ShadowCollection>

			<!-- ToggleSwitch -->
			<utu:ShadowCollection x:Key="ToggleSwitchOffBorderShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="1" Opacity="0.6" Spread="2" Color="{StaticResource ShadeShadowColor5}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.75" Spread="4" Color="{StaticResource LightShadowColor5}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchOnBorderShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.6" Spread="0" Color="{StaticResource LightShadowColor6}" />
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="1" Opacity="1" Spread="2" Color="{StaticResource ShadeShadowColor6}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchKnobOffShadows">
				<utu:Shadow BlurRadius="2" IsInner="False" OffsetX="2" OffsetY="0" Opacity="0.2" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="1" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-2" OffsetY="2" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor8}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchKnobOnShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="-2" OffsetY="4" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor6}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="0" OffsetY="0" Opacity="0.25" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="1" OffsetY="0" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor8}" />
				<utu:Shadow BlurRadius="1" IsInner="False" OffsetX="-1" OffsetY="0" Opacity="1" Spread="1" Color="{StaticResource ShadeShadowColor6}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ToggleSwitchOnBorderDisabledShadows">
				<utu:Shadow BlurRadius="2" IsInner="True" OffsetX="0.5" OffsetY="0.5" Opacity="0.15" Spread="2" Color="{StaticResource ShadeShadowColor5}" />
			</utu:ShadowCollection>

		</ResourceDictionary>
	</ResourceDictionary.ThemeDictionaries>
	<!--#endregion-->

	<!--#region Converters-->
	<um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY"
										NotNullOrEmptyValue="8"
										NullOrEmptyValue="0" />

	<converters:FromNullToValueConverter x:Key="HasIconToVisible"
										 NotNullValue="Visible"
										 NullValue="Collapsed" />

	<converters:FromNullToValueConverter x:Key="HasIconToCollapsed"
										 NotNullValue="Collapsed"
										 NullValue="Visible" />

	<um:FromBoolToValueConverter x:Key="ToggleSwitchIsOnToOpacity"
								 TrueValue="1"
								 FalseValue="0" />

	<um:FromBoolToValueConverter x:Key="ToggleSwitchIsOffToOpacity"
								 TrueValue="0"
								 FalseValue="1" />

	<um:FromNullToValueConverter x:Key="ToggleSwitchOffContentToContentSize"
								 NullValue="{StaticResource SmallThumbOffSize}"
								 NotNullValue="{StaticResource MediumThumbOffSize}" />

	<um:FromNullToValueConverter x:Key="ToggleSwitchOffContentToCornerRadius"
								 NullValue="8"
								 NotNullValue="12" />

	<um:FromNullToValueConverter x:Key="ToggleSwitchOffContentToContentMargin"
								 NullValue="0,0,6,0"
								 NotNullValue="0,0,2,0" />

	<!--#endregion-->

	<!--#region TextBox Style-->
	<Style x:Key="NeumorphicTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
		<Setter Property="PlaceholderForeground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="CornerRadius" Value="8" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodyLargeFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodyLargeFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodyLargeCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Padding" Value="16,16,14,16" />

		<Setter Property="MinHeight" Value="56" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<utu:ShadowContainer x:Name="RootPanel"
										 Shadows="{ThemeResource TextBoxShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="IconPresenter.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="ContentElement.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Empty">
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinHeight}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}"
							  Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<!-- Border in place to properly vertically center the icon inside when it's a one-line TextBox -->
							<!-- but keep it in the same place and at the top when it's a multiline TextBox -->
							<Border Height="28"
									VerticalAlignment="Top">
								<ContentPresenter x:Name="IconPresenter"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  HorizontalAlignment="Center"
												  Width="20"
												  Margin="1,0,18,0"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
							</Border>

							<ScrollViewer x:Name="ContentElement"
										  Grid.Column="1"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
										  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
										  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
										  IsTabStop="False"
										  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
										  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  ZoomMode="Disabled"
										  AutomationProperties.AccessibilityView="Raw">
								<ScrollViewer.RenderTransform>
									<CompositeTransform x:Name="ContentElement_CompositeTransform" />
								</ScrollViewer.RenderTransform>
							</ScrollViewer>

							<!-- Border in place to properly vertically center the placeholder inside when it's a one-line TextBox -->
							<!-- but keep it in the same place and at the top when it's a multiline TextBox -->
							<Border Grid.Column="1"
									Height="28"
									VerticalAlignment="Top">
								<TextBlock x:Name="PlaceholderElement"
										   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   IsHitTestVisible="False"
										   RenderTransformOrigin="0,0.5"
										   Text="{TemplateBinding PlaceholderText}"
										   TextAlignment="{TemplateBinding TextAlignment}"
										   TextWrapping="{TemplateBinding TextWrapping}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<TextBlock.RenderTransform>
										<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
									</TextBlock.RenderTransform>
								</TextBlock>
							</Border>

							<Button x:Name="DeleteButton"
									Grid.Column="2"
									Margin="8,0,0,0"
									IsTabStop="False"
									Foreground="{ThemeResource OnSurfaceMediumBrush}"
									Style="{StaticResource MaterialDeleteButtonStyle}"
									VerticalAlignment="Stretch"
									Visibility="Collapsed"
									AutomationProperties.AccessibilityView="Raw" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region PasswordBox Style-->
	<Style x:Key="NeumorphicPasswordBoxStyle"
		   TargetType="PasswordBox">
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
		<Setter Property="CornerRadius" Value="8" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodyLargeFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodyLargeFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodyLargeCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Padding" Value="16,16,14,16" />

		<Setter Property="MinHeight" Value="56" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="PasswordBox">
					<utu:ShadowContainer x:Name="RootPanel"
										 Shadows="{ThemeResource TextBoxShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="IconPresenter.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="ContentElement.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="RevealButton.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Empty">
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinHeight}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}"
							  Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<ContentPresenter x:Name="IconPresenter"
											  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
											  HorizontalAlignment="Center"
											  Width="20"
											  Margin="1,0,18,0"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />

							<ScrollViewer x:Name="ContentElement"
										  Grid.Column="1"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
										  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
										  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
										  IsTabStop="False"
										  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
										  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  ZoomMode="Disabled"
										  AutomationProperties.AccessibilityView="Raw">
								<ScrollViewer.RenderTransform>
									<CompositeTransform x:Name="ContentElement_CompositeTransform" />
								</ScrollViewer.RenderTransform>
							</ScrollViewer>

							<TextBlock x:Name="PlaceholderElement"
									   Grid.Column="1"
									   Foreground="{ThemeResource OnSurfaceVariantBrush}"
									   IsHitTestVisible="False"
									   RenderTransformOrigin="0,0.5"
									   Text="{TemplateBinding PlaceholderText}"
									   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
								<TextBlock.RenderTransform>
									<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
								</TextBlock.RenderTransform>
							</TextBlock>

							<Button x:Name="RevealButton"
									Grid.Column="2"
									Margin="8,0,0,0"
									IsTabStop="False"
									Foreground="{ThemeResource OnSurfaceMediumBrush}"
									Style="{StaticResource MaterialRevealButtonStyle}"
									VerticalAlignment="Stretch"
									Visibility="Collapsed"
									AutomationProperties.AccessibilityView="Raw" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region ComboBox Style-->
	<Style x:Key="NeumorphicComboBoxStyle"
		   TargetType="ComboBox">

		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="16,16,14,16" />
		<Setter Property="MinHeight" Value="56" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodyLargeFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodyLargeFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodyLargeCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="TabNavigation" Value="Once" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
		<Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="True" />
		<Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
		<Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource MaterialComboBoxItemStyle}" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<CarouselPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<utu:ShadowContainer x:Name="RootPanel"
										 Background="{TemplateBinding Background}"
										 Shadows="{ThemeResource ComboboxShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ComboBoxContent.Background" Value="{ThemeResource SystemControlTransparentBrush}" />
										<Setter Target="DropDownGlyph_Down.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="UpperPlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PopupBorder.Background" Value="{ThemeResource SystemControlTransparentBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="FocusedDropDown" />
								<VisualState x:Name="Focused" />
								<VisualState x:Name="FocusedPressed" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="DropDownStates">
								<VisualState x:Name="Opened">
									<VisualState.Setters>
										<Setter Target="DropDownGlyph_Up.Fill" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="DropDownGlyph_Down.Visibility" Value="Collapsed" />
										<Setter Target="DropDownGlyph_Up.Visibility" Value="Visible" />
									</VisualState.Setters>
									<Storyboard>

										<SplitOpenThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 ClosedTargetName="ContentPresenter"
																 ContentTargetName="ScrollViewer"
																 ContentTranslationOffset="0"
																 OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 OpenedTargetName="PopupBorder" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Closed">
									<VisualState.Setters>
										<Setter Target="DropDownGlyph_Down.Visibility" Value="Visible" />
										<Setter Target="DropDownGlyph_Up.Visibility" Value="Collapsed" />
									</VisualState.Setters>
									<Storyboard>
										<SplitCloseThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  ClosedTargetName="ContentPresenter"
																  ContentTargetName="ScrollViewer"
																  ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  ContentTranslationOffset="40"
																  OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  OpenedTargetName="PopupBorder" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
							  CornerRadius="4"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinHeight}">

							<Grid x:Name="ComboBoxContent"
								  Padding="{TemplateBinding Padding}">
								<Grid.Resources>
									<!-- Resources added here in order to manage the ContentPresenter TranslateY depending if there is a PlaceholderText or not -->
									<CompositeTransform x:Key="ContentPresenter_CompositeTransformWithPlaceholder"
														TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToContentTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />

									<CompositeTransform x:Key="ContentPresenter_CompositeTransformWithoutPlaceholder"
														TranslateY="0" />

									<um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformConverter"
																		NotNullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithPlaceholder}"
																		NullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}" />
								</Grid.Resources>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!-- Leading Icon -->
								<ContentPresenter x:Name="IconPresenter"
												  Width="20"
												  Margin="2,0,18,0"
												  HorizontalAlignment="Center"
												  VerticalAlignment="Center"
												  Foreground="{ThemeResource OnSurfaceBrush}"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />

								<!-- ContentPresenter -->
								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  MaxLines="1"
												  VerticalAlignment="Center"
												  RenderTransform="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformConverter}, TargetNullValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}, FallbackValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}}" />

								<!-- PlaceholderElement -->
								<TextBlock x:Name="PlaceholderElement"
										   Grid.Column="1"
										   VerticalAlignment="Center"
										   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToVisible}, TargetNullValue=Collapsed, FallbackValue=Collapsed}"
										   Foreground="{ThemeResource OnSurfaceMediumBrush}"
										   IsHitTestVisible="False"
										   MaxLines="1"
										   RenderTransformOrigin="0,0.5"
										   Style="{StaticResource BodyLarge}"
										   Text="{TemplateBinding PlaceholderText}" />

								<TextBlock x:Name="UpperPlaceholderElement"
										   Grid.Column="1"
										   VerticalAlignment="Center"
										   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToCollapsed}, TargetNullValue=Collapsed, FallbackValue=Collapsed}"
										   Foreground="{ThemeResource OnSurfaceVariantBrush}"
										   IsHitTestVisible="False"
										   MaxLines="1"
										   RenderTransformOrigin="0,0.5"
										   Style="{StaticResource BodyLarge}"
										   Text="{TemplateBinding PlaceholderText}">
									<TextBlock.RenderTransform>
										<CompositeTransform x:Name="UpperPlaceholderElement_CompositeTransform"
															ScaleX="0.7"
															ScaleY="0.7"
															TranslateY="-11" />
									</TextBlock.RenderTransform>
								</TextBlock>

								<!-- Down -->
								<Path x:Name="DropDownGlyph_Down"
									  Grid.Column="2"
									  Width="10"
									  Height="5"
									  Margin="7,0"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Data="M0 0L5 5L10 0H0Z"
									  Fill="{ThemeResource OnSurfaceMediumBrush}"
									  Stretch="Uniform" />

								<!-- Up -->
								<Path x:Name="DropDownGlyph_Up"
									  Grid.Column="2"
									  Width="10"
									  Height="5"
									  Margin="7,0"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Data="M0 0L-5 -5L-10 0H0Z"
									  Fill="{ThemeResource OnSurfaceMediumBrush}"
									  Stretch="Uniform"
									  Visibility="Collapsed" />
							</Grid>

							<!-- Popup -->
							<Popup x:Name="Popup">
								<Border x:Name="PopupBorder"
										CornerRadius="4"
										Background="{ThemeResource SurfaceBrush}">

									<!-- Workaround for Issue #213 where android PopupBorder doesn't get redrawn properly, adds Background, CornerRadius and Border to ScrollViewer -->
									<ScrollViewer x:Name="ScrollViewer"
												  MinWidth="400"
												  AutomationProperties.AccessibilityView="Raw"
												  BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"
												  CornerRadius="4"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
												  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
												  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
												  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
												  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
												  VerticalSnapPointsAlignment="Near"
												  VerticalSnapPointsType="OptionalSingle"
												  ZoomMode="Disabled"
												  Foreground="{ThemeResource SystemControlTransparentBrush}"
												  BorderBrush="{ThemeResource SystemControlTransparentBrush}">
										<ItemsPresenter />
									</ScrollViewer>
								</Border>
							</Popup>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Button Styles-->
	<x:Double x:Key="NeumorphicButtonIconContainerSize">18</x:Double>
	<x:Double x:Key="NeumorphicButtonIconSize">12</x:Double>

	<!-- Elevated Style -->
	<!-- Small -->
	<Style x:Key="NeumorphicSmallElevatedButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground" Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="MinWidth" Value="38" />
		<Setter Property="MinHeight" Value="38" />
		<Setter Property="CornerRadius" Value="19" />
		<Setter Property="Padding" Value="10,0" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel"
										 Background="{TemplateBinding Background}"
										 Shadows="{ThemeResource ElevatedButtonNormalShadows}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ElevatedButtonHoveredShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ElevatedButtonPressedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ElevatedButtonDisabledShadows}" />
										<Setter Target="RootPanel.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ElevatedButtonFocusedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="{TemplateBinding Height}"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinWidth}">

							<Grid CornerRadius="{TemplateBinding CornerRadius}"
								  Margin="{TemplateBinding Padding}"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<Border Height="{StaticResource NeumorphicButtonIconContainerSize}"
										Width="{StaticResource NeumorphicButtonIconContainerSize}"
										Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
									<ContentPresenter x:Name="IconPresenter"
													  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
													  Width="{StaticResource NeumorphicButtonIconSize}"
													  Height="{StaticResource NeumorphicButtonIconSize}"
													  HorizontalAlignment="{StaticResource ButtonIconHorizontalAlignment}"
													  VerticalAlignment="{StaticResource ButtonIconVerticalAlignment}"
													  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</Border>
								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="{StaticResource ButtonContentMargin}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontSize="{TemplateBinding FontSize}"
												  FontWeight="{TemplateBinding FontWeight}"
												  CharacterSpacing="{TemplateBinding CharacterSpacing}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Medium -->
	<Style x:Key="NeumorphicMediumElevatedButtonStyle"
		   BasedOn="{StaticResource NeumorphicSmallElevatedButtonStyle}"
		   TargetType="Button">

		<Setter Property="MinWidth" Value="48" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="CornerRadius" Value="24" />
		<Setter Property="Padding" Value="15,0" />

	</Style>

	<!-- Large -->
	<Style x:Key="NeumorphicLargeElevatedButtonStyle"
		   BasedOn="{StaticResource NeumorphicSmallElevatedButtonStyle}"
		   TargetType="Button">

		<Setter Property="MinWidth" Value="58" />
		<Setter Property="MinHeight" Value="58" />
		<Setter Property="CornerRadius" Value="29" />
		<Setter Property="Padding" Value="20,0" />

	</Style>

	<!-- Filled Style -->
	<!-- Small -->
	<Style x:Key="NeumorphicSmallFilledButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
		<Setter Property="Background" Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="MinWidth" Value="38" />
		<Setter Property="MinHeight" Value="38" />
		<Setter Property="CornerRadius" Value="19" />
		<Setter Property="Padding" Value="10,0" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel"
										 Background="{TemplateBinding Background}"
										 Shadows="{ThemeResource FilledButtonNormalShadows}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource FilledButtonHoveredShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource FilledButtonPressedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource FilledButtonDisabledShadows}" />
										<Setter Target="RootPanel.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource FilledButtonFocusedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="{TemplateBinding Height}"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinWidth}">

							<Grid CornerRadius="{TemplateBinding CornerRadius}"
								  Margin="{TemplateBinding Padding}"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<Border Height="{StaticResource NeumorphicButtonIconContainerSize}"
										Width="{StaticResource NeumorphicButtonIconContainerSize}"
										Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
									<ContentPresenter x:Name="IconPresenter"
													  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
													  Width="{StaticResource NeumorphicButtonIconSize}"
													  Height="{StaticResource NeumorphicButtonIconSize}"
													  HorizontalAlignment="{StaticResource ButtonIconHorizontalAlignment}"
													  VerticalAlignment="{StaticResource ButtonIconVerticalAlignment}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
								</Border>

								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="{StaticResource ButtonContentMargin}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontSize="{TemplateBinding FontSize}"
												  FontWeight="{TemplateBinding FontWeight}"
												  CharacterSpacing="{TemplateBinding CharacterSpacing}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Medium -->
	<Style x:Key="NeumorphicMediumFilledButtonStyle"
		   BasedOn="{StaticResource NeumorphicSmallFilledButtonStyle}"
		   TargetType="Button">

		<Setter Property="MinWidth" Value="48" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="CornerRadius" Value="24" />
		<Setter Property="Padding" Value="15,0" />

	</Style>

	<!-- Large -->
	<Style x:Key="NeumorphicLargeFilledButtonStyle"
		   BasedOn="{StaticResource NeumorphicSmallFilledButtonStyle}"
		   TargetType="Button">

		<Setter Property="MinWidth" Value="58" />
		<Setter Property="MinHeight" Value="58" />
		<Setter Property="CornerRadius" Value="29" />
		<Setter Property="Padding" Value="20,0" />

	</Style>

	<!-- FAB Style -->
	<CornerRadius x:Key="NeumorphicButtonCornerRadius">4</CornerRadius>
	<x:Double x:Key="NeumorphicFabFontSize">14</x:Double>

	<Style x:Key="NeumorphicFabStyle"
		   TargetType="Button">

		<Setter Property="Background" Value="{ThemeResource PrimaryContainerBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnPrimaryContainerBrush}" />
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{StaticResource NeumorphicFabFontSize}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="CornerRadius" Value="16" />
		<Setter Property="Padding" Value="16" />
		<Setter Property="MinHeight" Value="56" />
		<Setter Property="um:ControlExtensions.IconHeight" Value="16" />
		<Setter Property="um:ControlExtensions.IconWidth" Value="16" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="RootGrid">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background" Value="{ThemeResource OnPrimaryContainerHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled" />

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background" Value="{ThemeResource OnPrimaryContainerPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background" Value="{ThemeResource OnPrimaryContainerFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused" />

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<utu:ShadowContainer Shadows="{ThemeResource FabShadows}">

							<Grid CornerRadius="{TemplateBinding CornerRadius}"
								  Background="{TemplateBinding Background}"
								  MinHeight="{TemplateBinding MinHeight}"
								  MinWidth="{TemplateBinding MinWidth}">

								<StackPanel x:Name="ContentPanel"
											Orientation="Horizontal"
											Margin="{TemplateBinding Padding}">

									<!-- Icon -->
									<Viewbox Height="{Binding Path=(um:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}"
											 Width="{Binding Path=(um:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}"
											 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											 Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
										<ContentPresenter Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
														  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
									</Viewbox>

									<!-- Icon/Content spacing -->
									<Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
										<Border Width="8"
												Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
									</Border>

									<!-- Content -->
									<ContentPresenter x:Name="ContentPresenter"
													  Content="{TemplateBinding Content}"
													  ContentTemplate="{TemplateBinding ContentTemplate}"
													  ContentTransitions="{TemplateBinding ContentTransitions}"
													  CornerRadius="{StaticResource NeumorphicButtonCornerRadius}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</StackPanel>
							</Grid>
						</utu:ShadowContainer>

						<Grid x:Name="StateLayer"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  MinHeight="{TemplateBinding MinHeight}"
							  MinWidth="{TemplateBinding MinWidth}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Small FAB Style -->
	<Style x:Key="NeumorphicFabSmallStyle"
		   BasedOn="{StaticResource NeumorphicFabStyle}"
		   TargetType="Button">

		<Setter Property="Padding" Value="12,0" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="CornerRadius" Value="12" />
	</Style>

	<!-- Large FAB Style -->
	<Style x:Key="NeumorphicFabLargeStyle"
		   BasedOn="{StaticResource NeumorphicFabStyle}"
		   TargetType="Button">

		<Setter Property="Padding" Value="40" />
		<Setter Property="MinHeight" Value="96" />
		<Setter Property="MinWidth" Value="96" />
		<Setter Property="CornerRadius" Value="28" />
		<Setter Property="um:ControlExtensions.IconHeight" Value="24" />
		<Setter Property="um:ControlExtensions.IconWidth" Value="24" />
	</Style>
	<!--#endregion-->

	<!--#region CheckBox Style-->
	<Style x:Key="NeumorphicCheckBoxStyle"
		   TargetType="CheckBox">
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />

		<!-- Start: Body Small Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodySmallFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodySmallFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodySmallCharacterSpacing}" />
		<!-- End: Body Small Typo -->

		<Setter Property="Padding" Value="{ThemeResource CheckBoxCheckAreaPadding}" />
		<Setter Property="CornerRadius" Value="{ThemeResource CheckBoxCheckAreaCornerRadius}" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="{ThemeResource CheckBoxCheckAreaSize}" />
		<Setter Property="UseSystemFocusVisuals" Value="False" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<Grid x:Name="Root">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CombinedStates">
								<VisualState x:Name="UncheckedNormal">
									<VisualState.Setters>
										<Setter Target="CheckGlyph.Opacity" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="UncheckedPointerOver">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxHoverShadows}" />
										<Setter Target="CheckGlyph.Opacity" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="UncheckedPressed">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxPressedShadows}" />
										<Setter Target="CheckGlyph.Opacity" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="UncheckedDisabled">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxDisabledShadows}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="CheckGlyph.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="CheckGlyph.Opacity" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedNormal">
									<VisualState.Setters>
										<Setter Target="CheckGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPointerOver">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxHoverShadows}" />
										<Setter Target="CheckGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="CheckGlyph"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 To="1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxPressedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedDisabled">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxDisabledShadows}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="CheckGlyph.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="CheckGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="IndeterminateNormal">
									<VisualState.Setters>
										<Setter Target="CheckGlyph.Opacity" Value="0" />
										<Setter Target="HyphenGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="IndeterminatePointerOver">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxHoverShadows}" />
										<Setter Target="CheckGlyph.Opacity" Value="0" />
										<Setter Target="HyphenGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="IndeterminatePressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="HyphenGlyph"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 To="1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxPressedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="IndeterminateDisabled">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxDisabledShadows}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="HyphenGlyph.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="CheckGlyph.Opacity" Value="0" />
										<Setter Target="HyphenGlyph.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="CheckPanel.Shadows" Value="{ThemeResource NeumorphicCheckBoxFocusedShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="{ThemeResource CheckBoxCheckAreaLength}" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<utu:ShadowContainer x:Name="CheckPanel"
											 Background="{TemplateBinding Background}"
											 Shadows="{ThemeResource NeumorphicCheckBoxShadows}">
							<Grid x:Name="CheckBoxContainer"
								  Height="{ThemeResource CheckBoxCheckAreaSize}"
								  Width="{ThemeResource CheckBoxCheckAreaSize}"
								  CornerRadius="{TemplateBinding CornerRadius}">

								<Path x:Name="HyphenGlyph"
									  Data="{ThemeResource CheckBoxHyphenGlyphPathData}"
									  Fill="{ThemeResource PrimaryBrush}"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Center"
									  Stretch="Uniform"
									  Width="12"
									  Height="4"
									  Opacity="0"
									  AutomationProperties.AccessibilityView="Raw" />

								<Path x:Name="CheckGlyph"
									  Data="{ThemeResource CheckBoxCheckGlyphPathData}"
									  Fill="{ThemeResource PrimaryBrush}"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Center"
									  Stretch="Uniform"
									  Width="12"
									  Height="12"
									  Opacity="0"
									  AutomationProperties.AccessibilityView="Raw" />
							</Grid>
						</utu:ShadowContainer>

						<ContentPresenter x:Name="ContentPresenter"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTransitions="{TemplateBinding ContentTransitions}"
										  Content="{TemplateBinding Content}"
										  Foreground="{TemplateBinding Foreground}"
										  FontWeight="{TemplateBinding FontWeight}"
										  FontFamily="{TemplateBinding FontFamily}"
										  FontSize="{TemplateBinding FontSize}"
										  CharacterSpacing="{TemplateBinding CharacterSpacing}"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  Grid.Column="1"
										  AutomationProperties.AccessibilityView="Raw"
										  TextWrapping="Wrap" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region ToggleButton Style-->
	<Style x:Key="NeumorphicToggleButtonStyle"
		   TargetType="ToggleButton">
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="MinWidth" Value="40" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="CornerRadius" Value="20" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.AlternateContent" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<utu:ShadowContainer x:Name="RootPanel"
										 Shadows="{ThemeResource ToggleButtonShadows}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<VisualState.Setters>
										<Setter Target="RootGrid.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="HoverOverlay.Opacity" Value="1" />
										<Setter Target="RootGrid.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="PressedOverlay.Opacity" Value="1" />
										<Setter Target="RootGrid.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="RootPanel.Opacity" Value="0.38" />
										<Setter Target="RootGrid.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>

								<!-- Checked -->
								<VisualState x:Name="Checked">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPointerOver">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="HoverOverlay.Fill" Value="{StaticResource OnPrimaryHoverBrush}" />
										<Setter Target="HoverOverlay.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPressed">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PressedOverlay.Fill" Value="{StaticResource OnPrimaryPressedBrush}" />
										<Setter Target="PressedOverlay.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedDisabled">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground" Value="{ThemeResource OnPrimaryMediumBrush}" />
										<Setter Target="RootPanel.Opacity" Value="0.38" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  Background="{ThemeResource PrimaryBrush}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Width="{TemplateBinding MinWidth}"
							  Height="{TemplateBinding MinHeight}">
							<!-- Ellipse for PointedOver State -->
							<Ellipse x:Name="HoverOverlay"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="Stretch"
									 Fill="{StaticResource PrimaryHoverBrush}"
									 Opacity="0"
									 Visibility="Visible" />

							<!-- Ellipse for Pressed State -->
							<Ellipse x:Name="PressedOverlay"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="Stretch"
									 Fill="{StaticResource PrimaryPressedBrush}"
									 Opacity="0"
									 Visibility="Visible" />

							<!-- Content -->
							<ContentPresenter x:Name="ContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{TemplateBinding Content}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />

							<!-- Alternate Content -->
							<ContentPresenter x:Name="AlternateContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{Binding Path=(um:ControlExtensions.AlternateContent), RelativeSource={RelativeSource TemplatedParent}}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
											  Foreground="{StaticResource OnPrimaryBrush}"
											  Visibility="Collapsed" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- endregion -->

	<!--#region RadioButton Style-->
	<Style x:Key="NeumorphicRadioButtonStyle"
		   TargetType="RadioButton">
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />

		<!-- Start: Body Small Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialRegularFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodySmallFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodySmallFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodySmallCharacterSpacing}" />
		<!-- End: Body Small Typo -->

		<Setter Property="Padding" Value="4,0,0,0" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="40" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<Grid x:Name="RootGrid"
						  Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="StateLayer"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 To="{ThemeResource HoverOpacity}">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="StateLayer"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 To="{ThemeResource PressedOpacity}">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="OuterEllipse.Fill" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="CheckEllipse.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="CheckStates">

								<VisualState x:Name="Checked">
									<VisualState.Setters>
										<Setter Target="CheckEllipse.Opacity" Value="1" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unchecked" />

								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="StateLayer"
														 Storyboard.TargetProperty="Opacity"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 To="{ThemeResource FocusedOpacity}">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="PointerFocused" />

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="{TemplateBinding MinWidth}" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<utu:ShadowContainer x:Name="StateLayer"
											 Shadows="{ThemeResource NeumorphicRadioButtonStateShadows}"
											 Opacity="0">
							<Grid Height="20"
								  Width="20"
								  CornerRadius="10" />
						</utu:ShadowContainer>

						<utu:ShadowContainer Shadows="{ThemeResource NeumorphicRadioButtonShadows}">
							<Grid Height="20"
								  Width="20"
								  CornerRadius="10">
								<Ellipse x:Name="OuterEllipse"
										 Height="20"
										 Width="20"
										 UseLayoutRounding="False"
										 Fill="{TemplateBinding Background}" />

								<Ellipse x:Name="CheckEllipse"
										 Height="10"
										 Width="10"
										 UseLayoutRounding="False"
										 Fill="{ThemeResource PrimaryBrush}"
										 Opacity="0" />
							</Grid>
						</utu:ShadowContainer>

						<ContentPresenter x:Name="ContentPresenter"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTransitions="{TemplateBinding ContentTransitions}"
										  Content="{TemplateBinding Content}"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  AutomationProperties.AccessibilityView="Raw"
										  TextWrapping="Wrap"
										  Grid.Column="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region IconButton Style-->

	<x:Double x:Key="IconButtonNeumorphicOpacityVisibleState">1</x:Double>
	<x:String x:Key="IconButtonNeumorphicEllipseVerticalAlignment">Stretch</x:String>
	<x:String x:Key="IconButtonNeumorphicEllipseHorizontalAlignment">Stretch</x:String>

	<Style x:Key="NeumorphicIconButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="CornerRadius" Value="20" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="MinWidth" Value="40" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel"
										 Shadows="{ThemeResource IconButtonShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="HoverOverlay.Opacity" Value="{ThemeResource IconButtonNeumorphicOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PressedOverlay.Opacity" Value="{ThemeResource IconButtonNeumorphicOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="FocusedOverlay.Opacity" Value="{ThemeResource IconButtonNeumorphicOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Opacity" Value="0.38" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="RootGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Width="{TemplateBinding MinWidth}"
							  Height="{TemplateBinding MinHeight}">
							<!-- Ellipse for PointerOver State -->
							<Ellipse x:Name="HoverOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNeumorphicEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNeumorphicEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillPointerOver}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Ellipse for Pressed State -->
							<Ellipse x:Name="PressedOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNeumorphicEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNeumorphicEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillPressed}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Ellipse for Focused State -->
							<Ellipse x:Name="FocusedOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNeumorphicEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNeumorphicEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillFocused}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Content -->
							<ContentPresenter x:Name="ContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{TemplateBinding Content}"
											  ContentTemplate="{TemplateBinding ContentTemplate}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
											  Width="24"
											  Height="24" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Chip Style-->
	<Style x:Key="NeumorphicChipStyle"
		   TargetType="utu:Chip">
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="CornerRadius" Value="8" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="8,0" />

		<Setter Property="Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:Chip">
					<utu:ShadowContainer x:Name="RootPanel"
										 Background="{TemplateBinding Background}"
										 Shadows="{ThemeResource ChipShadows}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<!-- [null,Checked,~~Indeterminate~~]*[null,Pressed,PointerOver,Disabled] ?? Normal -->

								<VisualState x:Name="Normal">
									<VisualState.Setters />
								</VisualState>
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipShadows}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfaceHoverBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipShadows}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfacePressedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipShadows}" />
										<Setter Target="RootPanel.Opacity" Value="0.38" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />

										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Checked">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipSelectedShadows}" />
										<Setter Target="RootPanel.Background" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipSelectedShadows}" />
										<Setter Target="RootPanel.Background" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryHoverBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipSelectedShadows}" />
										<Setter Target="RootPanel.Background" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryPressedBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="GridRoot"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="32"
							  Margin="4">
							<Border x:Name="StateOverlay"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

							<Grid Padding="{TemplateBinding Padding}"
								  CornerRadius="{TemplateBinding CornerRadius}">
								<Grid.ColumnDefinitions>
									<!-- 0: Leading Icon, 1: Content: 2: Remove Button -->
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!-- C0: Leading Icon / Check Glyph -->
								<ContentPresenter x:Name="IconPresenter"
												  Grid.Column="0"
												  Width="18"
												  Height="18"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												  AutomationProperties.AccessibilityView="Raw"
												  Content="{TemplateBinding Icon}"
												  ContentTemplate="{TemplateBinding IconTemplate}"
												  Foreground="{ThemeResource OnSurfaceVariantBrush}"
												  Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" />

								<Grid x:Name="CheckGlyphElement"
									  Grid.Column="0"
									  Width="20"
									  Height="20"
									  Padding="2"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  Visibility="Collapsed">
									<Path HorizontalAlignment="Center"
										  VerticalAlignment="Center"
										  AutomationProperties.AccessibilityView="Raw"
										  Data="{StaticResource MaterialCheckGlyphPathData}"
										  Fill="{StaticResource OnPrimaryBrush}"
										  Stretch="Uniform"
										  Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}, FallbackValue=Collapsed}" />
								</Grid>

								<!-- C1: Content -->
								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="8,0"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  AutomationProperties.AccessibilityView="Raw"
												  CharacterSpacing="7"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{ThemeResource MaterialMediumFontFamily}"
												  Foreground="{TemplateBinding Foreground}" />

								<!-- C2: Remove Button -->
								<Button x:Name="PART_RemoveButton"
										Grid.Column="2"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Foreground="{TemplateBinding Foreground}"
										Style="{StaticResource MaterialChipDeleteIconButtonStyle}"
										Visibility="{Binding CanRemove, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}, FallbackValue=Collapsed}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region TabBar Style-->
	<Style x:Key="NeumorphicBaseTabBarStyle"
		   BasedOn="{StaticResource DefaultTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="Width" Value="300" />
		<Setter Property="Height" Value="80" />
		<Setter Property="CornerRadius" Value="16,16,0,0" />
		<Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
		<Setter Property="um:ControlExtensions.TintedBackground" Value="{x:Null}" />
		<Setter Property="um:ControlExtensions.IsTintEnabled" Value="False" />
		<Setter Property="SelectionIndicatorPresenterStyle" Value="{StaticResource MaterialTabBarSelectionIndicatorPresenterStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBar">
					<utu:ShadowContainer Shadows="{ThemeResource TabBarShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="OrientationStates">
								<VisualState x:Name="Horizontal">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Vertical">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="IndicatorPlacementStates">
								<VisualState x:Name="Above" />
								<VisualState x:Name="Below">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.Visibility" Value="Visible" />
										<Setter Target="AboveSelectionIndicatorPresenter.Visibility" Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="TabBarGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}">
							<utu:TabBarSelectionIndicatorPresenter x:Name="BelowSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="BelowSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}"
																   Visibility="Collapsed" />
							<ItemsPresenter x:Name="TabBarItemsPresenter"
											Width="{TemplateBinding Width}"
											Height="{TemplateBinding Height}"
											Padding="{TemplateBinding Padding}" />
							<utu:TabBarSelectionIndicatorPresenter x:Name="AboveSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="AboveSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}" />

						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NeumorphicVerticalTabBarStyle"
		   BasedOn="{StaticResource NeumorphicBaseTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="Width" Value="80" />
		<Setter Property="Height" Value="320" />
		<Setter Property="CornerRadius" Value="40" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="{ThemeResource NavigationTabBarWidthOrHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="VisibleBounds" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NeumorphicBaseNavigationTabBarItemStyle}" />
		<Setter Property="Orientation" Value="Vertical" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<utu:TabBarListPanel Orientation="Vertical" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NeumorphicBottomTabBarStyle"
		   BasedOn="{StaticResource NeumorphicBaseTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="VerticalAlignment" Value="Bottom" />
		<Setter Property="MinHeight" Value="{ThemeResource NavigationTabBarWidthOrHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="Bottom" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NeumorphicBaseNavigationTabBarItemStyle}" />
	</Style>

	<Style x:Key="NeumorphicTopTabBarStyle"
		   BasedOn="{StaticResource DefaultTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="Width" Value="300" />
		<Setter Property="Height" Value="80" />
		<Setter Property="CornerRadius" Value="40" />
		<Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
		<Setter Property="um:ControlExtensions.TintedBackground" Value="{x:Null}" />
		<Setter Property="um:ControlExtensions.IsTintEnabled" Value="False" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="MinHeight" Value="{ThemeResource TopTabBarHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="Top" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NeumorphicBaseContentTabBarItemStyle}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBar">
					<utu:ShadowContainer Shadows="{ThemeResource ContentTabBarShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="OrientationStates">
								<VisualState x:Name="Horizontal">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Vertical">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="IndicatorPlacementStates">
								<VisualState x:Name="Above" />
								<VisualState x:Name="Below">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.Visibility" Value="Visible" />
										<Setter Target="AboveSelectionIndicatorPresenter.Visibility" Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="TabBarGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}">
							<utu:TabBarSelectionIndicatorPresenter x:Name="BelowSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="BelowSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}"
																   Visibility="Collapsed" />
							<ItemsPresenter x:Name="TabBarItemsPresenter"
											Width="{TemplateBinding Width}"
											Height="{TemplateBinding Height}"
											Padding="{TemplateBinding Padding}" />
							<utu:TabBarSelectionIndicatorPresenter x:Name="AboveSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="AboveSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}" />

						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--#region TabBarItem-->
	<Style x:Key="NeumorphicBaseNavigationTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Padding" Value="{ThemeResource NavigationTabBarItemPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<Grid x:Name="LayoutRoot"
						  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalAlignment}"
						  Background="{TemplateBinding Background}"
						  Control.IsTemplateFocusTarget="True"
						  Padding="{TemplateBinding Padding}"
						  AutomationProperties.AccessibilityView="Raw"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<Grid x:Name="ContentGrid"
							  RowSpacing="4">
							<Grid.RowDefinitions>
								<RowDefinition x:Name="IconRow"
											   Height="*" />
								<RowDefinition x:Name="ContentRow"
											   Height="Auto" />
							</Grid.RowDefinitions>

							<Grid x:Name="IconStateLayer"
								  Width="{ThemeResource NavigationTabBarItemActiveIndicatorWidth}"
								  Height="{ThemeResource NavigationTabBarItemActiveIndicatorHeight}"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  CornerRadius="{ThemeResource NavigationTabBarItemActiveIndicatorCornerRadius}" />

							<utu:ShadowContainer x:Name="IconShadowPanel">
								<Grid x:Name="ActiveIndicator"
									  Width="{ThemeResource NavigationTabBarItemActiveIndicatorWidth}"
									  Height="{ThemeResource NavigationTabBarItemActiveIndicatorHeight}"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  CornerRadius="{ThemeResource NavigationTabBarItemActiveIndicatorCornerRadius}">

									<Border Width="{ThemeResource NavigationTabBarItemIconHeight}"
											Height="{ThemeResource NavigationTabBarItemIconHeight}"
											HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<Viewbox x:Name="IconBox"
												 HorizontalAlignment="Center">
											<ContentPresenter x:Name="Icon"
															  Content="{TemplateBinding Icon}"
															  Foreground="{TemplateBinding Foreground}" />

										</Viewbox>
									</Border>

									<!-- BADGE -->
									<!-- This part can be replaced when InfoBadge will be available in WinUI3 -->
									<!-- See this commit for the implementation: c935919b2c390014dd8509cc50e16b1549511ffa -->
									<!-- (Related Branch: dev/agzi/I274-InfoBadgeImplementationForTBI) -->

									<Grid Visibility="{TemplateBinding BadgeVisibility}">
										<!-- Small Badge -->
										<Ellipse Width="{ThemeResource NavigationTabBarItemSmallBadgeWidth}"
												 Height="{ThemeResource NavigationTabBarItemSmallBadgeHeight}"
												 Margin="{ThemeResource NavigationTabBarItemSmallBadgeMargin}"
												 HorizontalAlignment="Right"
												 VerticalAlignment="Top"
												 Fill="{ThemeResource NavigationTabBarItemErrorBrush}"
												 Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}}" />


										<!-- Large Badge -->
										<Border Height="{ThemeResource NavigationTabBarItemLargeBadgeHeight}"
												MinWidth="{ThemeResource NavigationTabBarItemLargeBadgeMinWidth}"
												Margin="{ThemeResource NavigationTabBarItemLargeBadgeMargin}"
												Padding="{ThemeResource NavigationTabBarItemLargeBadgePadding}"
												HorizontalAlignment="Left"
												VerticalAlignment="Top"
												Background="{ThemeResource NavigationTabBarItemErrorBrush}"
												CornerRadius="{ThemeResource NavigationTabBarItemLargeBadgeCornerRadius}"
												Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}">

											<TextBlock HorizontalAlignment="Center"
													   VerticalAlignment="Center"
													   Foreground="{ThemeResource NavigationTabBarItemOnErrorBrush}"
													   MaxLines="1"
													   Style="{StaticResource LabelExtraSmall}"
													   Text="{TemplateBinding BadgeValue}"
													   TextAlignment="Center" />

										</Border>
									</Grid>
								</Grid>
							</utu:ShadowContainer>

							<Grid x:Name="ContentStateLayer"
								  Grid.Row="1"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Height="40"
								  Width="70"
								  CornerRadius="20"
								  Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToCollapsed}}" />

							<utu:ShadowContainer x:Name="ContentShadowPanel"
												 Grid.Row="1"
												 Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToCollapsed}}">
								<Grid x:Name="ShadowContentPresenterGrid"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center">
									<Border HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<ContentPresenter x:Name="ShadowContentPresenter"
														  Content="{TemplateBinding Content}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  Foreground="{TemplateBinding Foreground}"
														  TextWrapping="NoWrap"
														  HorizontalAlignment="Center"
														  VerticalAlignment="Center" />
									</Border>
								</Grid>
							</utu:ShadowContainer>

							<Grid x:Name="ContentPresenterGrid"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Grid.Row="1"
								  Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToVisible}}">
								<Border HorizontalAlignment="Center"
										VerticalAlignment="Center">
									<ContentPresenter x:Name="ContentPresenter"
													  Content="{TemplateBinding Content}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  FontWeight="{TemplateBinding FontWeight}"
													  Foreground="{TemplateBinding Foreground}"
													  TextWrapping="NoWrap"
													  HorizontalAlignment="Center"
													  VerticalAlignment="Center" />
								</Border>
							</Grid>
						</Grid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="PointerStates">
								<VisualState x:Name="Normal" />
								<not_mobile:VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="IconStateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
										<Setter Target="ContentStateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="IconStateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
										<Setter Target="ContentStateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ShadowContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<not_mobile:VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ShadowContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="IconStateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
										<Setter Target="ContentStateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ShadowContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="IconStateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
										<Setter Target="ContentStateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ActiveIndicator.Background" Value="Transparent" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource OnSurfaceVariantColor}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceVariantColor}" />
										<Setter Target="ShadowContentPresenter.Foreground" Value="{ThemeResource OnSurfaceVariantColor}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="TabBarIconPositionStates">
								<VisualState x:Name="IconOnTop" />
								<VisualState x:Name="IconOnly">
									<VisualState.Setters>
										<Setter Target="ContentShadowPanel.Visibility" Value="Collapsed" />
										<Setter Target="ContentGrid.RowSpacing" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ContentOnly">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Visibility" Value="Collapsed" />
										<Setter Target="IconStateLayer.Visibility" Value="Collapsed" />
										<Setter Target="ContentPresenterGrid.Height" Value="{ThemeResource NavigationTabBarItemActiveIndicatorHeight}" />
										<Setter Target="ContentPresenterGrid.Width" Value="{ThemeResource NavigationTabBarItemActiveIndicatorWidth}" />
										<Setter Target="ContentPresenterGrid.CornerRadius" Value="{ThemeResource NavigationTabBarItemActiveIndicatorCornerRadius}" />
										<Setter Target="ContentPresenter.HorizontalAlignment" Value="Center" />
										<Setter Target="ContentPresenter.VerticalAlignment" Value="Center" />
										<Setter Target="ShadowContentPresenterGrid.Height" Value="40" />
										<Setter Target="ShadowContentPresenterGrid.Width" Value="70" />
										<Setter Target="ShadowContentPresenterGrid.CornerRadius" Value="20" />
										<Setter Target="ShadowContentPresenter.HorizontalAlignment" Value="Center" />
										<Setter Target="ShadowContentPresenter.VerticalAlignment" Value="Center" />
										<Setter Target="IconRow.Height" Value="0" />
										<Setter Target="ContentRow.Height" Value="*" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<x:String x:Key="ContentTabBarItemCornerRadius">32</x:String>
	<x:Double x:Key="ContentTabBarItemHeight">64</x:Double>
	<x:Double x:Key="ContentTabBarItemWidth">120</x:Double>

	<Style x:Key="NeumorphicBaseContentTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Padding" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<Grid x:Name="LayoutRoot"
						  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalAlignment}"
						  Background="{TemplateBinding Background}"
						  Control.IsTemplateFocusTarget="True"
						  Padding="{TemplateBinding Padding}"
						  AutomationProperties.AccessibilityView="Raw"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<Grid x:Name="StateLayer"
							  HorizontalAlignment="Center"
							  VerticalAlignment="Center"
							  CornerRadius="{StaticResource ContentTabBarItemCornerRadius}"
							  Height="{StaticResource ContentTabBarItemHeight}"
							  Width="{StaticResource ContentTabBarItemWidth}" />

						<utu:ShadowContainer x:Name="ShadowPanel">

							<Grid x:Name="ContentGrid"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  CornerRadius="{StaticResource ContentTabBarItemCornerRadius}"
								  Height="{StaticResource ContentTabBarItemHeight}"
								  Width="{StaticResource ContentTabBarItemWidth}"
								  Padding="12,8">
								<Grid.RowDefinitions>
									<RowDefinition x:Name="IconRow"
												   Height="*" />
									<RowDefinition x:Name="ContentRow"
												   Height="*" />
								</Grid.RowDefinitions>

								<Grid x:Name="ActiveIndicator"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Width="24"
									  Height="24">

									<Border Width="{ThemeResource NavigationTabBarItemIconHeight}"
											Height="{ThemeResource NavigationTabBarItemIconHeight}"
											HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<Viewbox x:Name="IconBox"
												 HorizontalAlignment="Center">
											<ContentPresenter x:Name="Icon"
															  Content="{TemplateBinding Icon}"
															  Foreground="{TemplateBinding Foreground}" />

										</Viewbox>
									</Border>

									<!-- BADGE -->
									<!-- This part can be replaced when InfoBadge will be available in WinUI3 -->
									<!-- See this commit for the implementation: c935919b2c390014dd8509cc50e16b1549511ffa -->
									<!-- (Related Branch: dev/agzi/I274-InfoBadgeImplementationForTBI) -->

									<Grid Visibility="{TemplateBinding BadgeVisibility}">
										<!-- Small Badge -->
										<Ellipse Width="{ThemeResource NavigationTabBarItemSmallBadgeWidth}"
												 Height="{ThemeResource NavigationTabBarItemSmallBadgeHeight}"
												 Margin="{ThemeResource NavigationTabBarItemSmallBadgeMargin}"
												 HorizontalAlignment="Right"
												 VerticalAlignment="Top"
												 Fill="{ThemeResource NavigationTabBarItemErrorBrush}"
												 Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}}" />


										<!-- Large Badge -->
										<Border Height="{ThemeResource NavigationTabBarItemLargeBadgeHeight}"
												MinWidth="{ThemeResource NavigationTabBarItemLargeBadgeMinWidth}"
												Margin="{ThemeResource NavigationTabBarItemLargeBadgeMargin}"
												Padding="{ThemeResource NavigationTabBarItemLargeBadgePadding}"
												HorizontalAlignment="Left"
												VerticalAlignment="Top"
												Background="{ThemeResource NavigationTabBarItemErrorBrush}"
												CornerRadius="{ThemeResource NavigationTabBarItemLargeBadgeCornerRadius}"
												Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}">

											<TextBlock HorizontalAlignment="Center"
													   VerticalAlignment="Center"
													   Foreground="{ThemeResource NavigationTabBarItemOnErrorBrush}"
													   MaxLines="1"
													   Style="{StaticResource LabelExtraSmall}"
													   Text="{TemplateBinding BadgeValue}"
													   TextAlignment="Center" />

										</Border>
									</Grid>
								</Grid>

								<Grid x:Name="ContentPresenterGrid"
									  Grid.Row="1"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Height="16">
									<Border HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<ContentPresenter x:Name="ContentPresenter"
														  Content="{TemplateBinding Content}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  Foreground="{TemplateBinding Foreground}"
														  TextWrapping="NoWrap"
														  HorizontalAlignment="Center"
														  VerticalAlignment="Center" />
									</Border>
								</Grid>
							</Grid>
						</utu:ShadowContainer>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="PointerStates">
								<VisualState x:Name="Normal" />
								<not_mobile:VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="StateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="StateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<not_mobile:VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="StateLayer.Background" Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{ThemeResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="StateLayer.Background" Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationTabBarBackgroundDisabled}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource NavigationTabBarItemIconForegroundDisabled}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationTabBarForegroundDisabled}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="TabBarIconPositionStates">

								<VisualState x:Name="IconOnTop" />

								<VisualState x:Name="IconOnly">
									<VisualState.Setters>
										<Setter Target="ContentRow.Height" Value="0" />
										<Setter Target="ContentGrid.Height" Value="40" />
										<Setter Target="ContentGrid.Width" Value="80" />
										<Setter Target="ContentGrid.CornerRadius" Value="20" />
										<Setter Target="StateLayer.Height" Value="40" />
										<Setter Target="StateLayer.Width" Value="80" />
										<Setter Target="StateLayer.CornerRadius" Value="20" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ContentOnly">
									<VisualState.Setters>
										<Setter Target="IconRow.Height" Value="0" />
										<Setter Target="ContentGrid.Height" Value="40" />
										<Setter Target="ContentGrid.Width" Value="80" />
										<Setter Target="ContentGrid.CornerRadius" Value="20" />
										<Setter Target="StateLayer.Height" Value="40" />
										<Setter Target="StateLayer.Width" Value="80" />
										<Setter Target="StateLayer.CornerRadius" Value="20" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NeumorphicFabTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="IsSelectable" Value="False" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="CornerRadius" Value="64" />
		<Setter Property="Padding" Value="{ThemeResource FabTabBarItemPadding}" />
		<Setter Property="Background" Value="{ThemeResource PrimaryContainerColor}" />
		<Setter Property="Foreground" Value="{ThemeResource OnPrimaryContainerColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<utu:ShadowContainer Shadows="{ThemeResource FabTabBarItemShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryContainerHoverBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryContainerPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled" />

							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryContainerFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="Root"
							  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalAlignment}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}">

							<Grid>
								<StackPanel x:Name="ContentPanel"
											Margin="{TemplateBinding Padding}"
											Orientation="Horizontal">

									<!-- Icon -->
									<Viewbox Width="{ThemeResource FabTabBarItemContentWidthOrHeight}"
											 Height="{ThemeResource FabTabBarItemContentWidthOrHeight}"
											 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											 Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">

										<ContentPresenter x:Name="IconPresenter"
														  Content="{TemplateBinding Icon}"
														  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />

									</Viewbox>

									<!-- Icon/Content spacing -->
									<Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
										<Border Width="{ThemeResource FabTabBarItemIconTextPadding}"
												Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
									</Border>

									<!-- Content -->
									<ContentPresenter x:Name="ContentPresenter"
													  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													  Content="{TemplateBinding Content}"
													  ContentTemplate="{TemplateBinding ContentTemplate}"
													  ContentTransitions="{TemplateBinding ContentTransitions}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  FontWeight="{TemplateBinding FontWeight}" />

								</StackPanel>
							</Grid>
							<Border x:Name="StateOverlay"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#endregion-->

	<!--#region Slider Style-->
	<Style x:Key="NeumorphicSliderThumbStyle"
		   TargetType="Thumb">

		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="CornerRadius" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NeumorphicSliderStyle"
		   TargetType="Slider">

		<Setter Property="Background" Value="{ThemeResource SurfaceVariantBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontFamily" Value="{ThemeResource SliderFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource SliderFontSize}" />
		<Setter Property="ManipulationMode" Value="None" />
		<Setter Property="IsFocusEngagementEnabled" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Slider">

					<Grid Margin="{TemplateBinding Padding}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<VisualState.Setters>
										<Setter Target="HorizontalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="VerticalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="HorizontalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="VerticalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="HorizontalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
										<Setter Target="VerticalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="HorizontalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="VerticalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="HorizontalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="VerticalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="HorizontalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
										<Setter Target="VerticalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
										<Setter Target="HorizontalStateLayer.Opacity" Value="0.12" />
										<Setter Target="VerticalStateLayer.Opacity" Value="0.12" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="HorizontalDecreaseBorder.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="VerticalDecreaseBorder.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="VerticalTrackRect.Background" Value="{ThemeResource SurfaceBrush}" />
										<Setter Target="HorizontalTrackRect.Background" Value="{ThemeResource SurfaceBrush}" />
										<Setter Target="HorizontalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="VerticalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="HorizontalThumb.Background" Value="{ThemeResource ThumbBackgroundDisabledBrush}" />
										<Setter Target="VerticalThumb.Background" Value="{ThemeResource ThumbBackgroundDisabledBrush}" />
										<Setter Target="HorizontalThumbShadow.Shadows" Value="{ThemeResource SliderThumbDisabledShadow}" />
										<Setter Target="VerticalThumbShadow.Shadows" Value="{ThemeResource SliderThumbDisabledShadow}" />
										<Setter Target="TopTickBar.Fill" Value="{ThemeResource SliderTickBarFillDisabled}" />
										<Setter Target="BottomTickBar.Fill" Value="{ThemeResource SliderTickBarFillDisabled}" />
										<Setter Target="LeftTickBar.Fill" Value="{ThemeResource SliderTickBarFillDisabled}" />
										<Setter Target="RightTickBar.Fill" Value="{ThemeResource SliderTickBarFillDisabled}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="HorizontalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="VerticalThumbShadow.Shadows" Value="{ThemeResource SliderThumbShadows}" />
										<Setter Target="HorizontalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="VerticalTrackRectShadow.Shadows" Value="{ThemeResource SliderTrackRectShadows}" />
										<Setter Target="HorizontalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
										<Setter Target="VerticalDecreaseRectShadow.Shadows" Value="{ThemeResource SliderDecreaseRectShadows}" />
										<Setter Target="HorizontalStateLayer.Opacity" Value="0.08" />
										<Setter Target="VerticalStateLayer.Opacity" Value="0.08" />
									</VisualState.Setters>
								</VisualState>

							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusEngagementStates">
								<VisualState x:Name="FocusDisengaged" />

								<VisualState x:Name="FocusEngagedHorizontal" />

								<VisualState x:Name="FocusEngagedVertical" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<!-- SliderContainer -->
						<Grid x:Name="SliderContainer"
							  Grid.Row="1"
							  Background="Transparent"
							  Control.IsTemplateFocusTarget="False">

							<!-- HorizontalTemplate -->
							<Grid x:Name="HorizontalTemplate"
								  MinHeight="32">

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<Grid.RowDefinitions>
									<RowDefinition Height="15" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="15" />
								</Grid.RowDefinitions>


								<!-- HorizontalTrackRect -->
								<utu:ShadowContainer x:Name="HorizontalTrackRectShadow"
													 Grid.Row="1"
													 Grid.ColumnSpan="3">
									<Border x:Name="HorizontalTrackRect"
											Width="{TemplateBinding Width}"
											Height="10"
											Background="{TemplateBinding Background}"
											CornerRadius="8" />
								</utu:ShadowContainer>

								<!-- HorizontalDecreaseRect -->
								<utu:ShadowContainer x:Name="HorizontalDecreaseRectShadow"
													 Grid.Row="1">
									<!-- Using CornerRadius of 8 instead of 8,0,0,8 here until https://github.com/unoplatform/uno.toolkit.ui/issues/735 is fixed -->
									<Border x:Name="HorizontalDecreaseBorder"
											CornerRadius="8"
											Height="10"
											Background="{TemplateBinding Foreground}">
										<Rectangle x:Name="HorizontalDecreaseRect" />
									</Border>
								</utu:ShadowContainer>

								<!-- TopTickBar -->
								<TickBar x:Name="TopTickBar"
										 Grid.ColumnSpan="3"
										 Height="{ThemeResource SliderTopTickBarHeight}"
										 Margin="{ThemeResource SliderTopTickBarMargin}"
										 VerticalAlignment="Bottom"
										 Fill="{ThemeResource SliderTickBarFill}"
										 Visibility="Collapsed" />

								<!-- HorizontalInlineTickBar -->
								<TickBar x:Name="HorizontalInlineTickBar"
										 Grid.Row="1"
										 Grid.ColumnSpan="3"
										 Height="{ThemeResource SliderHorizontalInlineTickBarHeight}"
										 Fill="{ThemeResource SliderInlineTickBarFill}"
										 Visibility="Collapsed" />

								<!-- BottomTickBar -->
								<TickBar x:Name="BottomTickBar"
										 Grid.Row="2"
										 Grid.ColumnSpan="3"
										 Height="{ThemeResource SliderBottomTickBarHeight}"
										 Margin="{ThemeResource SliderBottomTickBarMargin}"
										 VerticalAlignment="Top"
										 Fill="{ThemeResource SliderTickBarFill}"
										 Visibility="Collapsed" />


								<Grid Grid.RowSpan="3"
									  Grid.Column="1">
									<utu:ShadowContainer x:Name="HorizontalStateLayer"
														 Shadows="{ThemeResource SliderThumbStateShadow}"
														 Opacity="0">
										<Grid Width="24"
											  Height="24"
											  CornerRadius="12" />
									</utu:ShadowContainer>

									<!-- HorizontalThumb -->
									<utu:ShadowContainer x:Name="HorizontalThumbShadow">
										<Thumb x:Name="HorizontalThumb"
											   Width="24"
											   Height="24"
											   AutomationProperties.AccessibilityView="Raw"
											   DataContext="{TemplateBinding Value}"
											   Style="{StaticResource NeumorphicSliderThumbStyle}" />
									</utu:ShadowContainer>
								</Grid>
							</Grid>

							<!-- VerticalTemplate -->
							<Grid x:Name="VerticalTemplate"
								  MinWidth="32"
								  Visibility="Collapsed">

								<Grid.RowDefinitions>
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="15" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="15" />
								</Grid.ColumnDefinitions>

								<!-- VerticalTrackRect -->
								<utu:ShadowContainer x:Name="VerticalTrackRectShadow"
													 Grid.RowSpan="3"
													 Grid.Column="1">
									<Grid x:Name="VerticalTrackRect"
										  Height="{TemplateBinding Height}"
										  Width="10"
										  Background="{TemplateBinding Background}"
										  CornerRadius="8" />
								</utu:ShadowContainer>

								<!-- VerticalDecreaseRect -->
								<utu:ShadowContainer x:Name="VerticalDecreaseRectShadow"
													 Grid.Row="2"
													 Grid.Column="1">
									<!-- Using CornerRadius of 8 instead of 8,8,0,0 here until https://github.com/unoplatform/uno.toolkit.ui/issues/735 is fixed -->
									<Border x:Name="VerticalDecreaseBorder"
											CornerRadius="8"
											Width="10"
											Background="{TemplateBinding Foreground}">
										<Rectangle x:Name="VerticalDecreaseRect" />
									</Border>
								</utu:ShadowContainer>

								<!-- LeftTickBar -->
								<TickBar x:Name="LeftTickBar"
										 Grid.RowSpan="3"
										 Width="{ThemeResource SliderLeftTickBarWidth}"
										 Margin="{ThemeResource SliderLeftTickBarMargin}"
										 HorizontalAlignment="Right"
										 Fill="{ThemeResource SliderTickBarFill}"
										 Visibility="Collapsed" />

								<!-- VerticalInlineTickBar -->
								<TickBar x:Name="VerticalInlineTickBar"
										 Grid.RowSpan="3"
										 Grid.Column="1"
										 Width="{ThemeResource SliderVerticallInlineTickBarWidth}"
										 Fill="{ThemeResource SliderInlineTickBarFill}"
										 Visibility="Collapsed" />

								<!-- RightTickBar -->
								<TickBar x:Name="RightTickBar"
										 Grid.RowSpan="3"
										 Grid.Column="2"
										 Width="{ThemeResource SliderRightTickBarWidth}"
										 Margin="{ThemeResource SliderRightTickBarMargin}"
										 HorizontalAlignment="Left"
										 Fill="{ThemeResource SliderTickBarFill}"
										 Visibility="Collapsed" />

								<Grid Grid.Row="1"
									  Grid.ColumnSpan="3">
									<utu:ShadowContainer x:Name="VerticalStateLayer"
														 Shadows="{ThemeResource SliderThumbStateShadow}"
														 Opacity="0">
										<Grid Width="24"
											  Height="24"
											  CornerRadius="12" />
									</utu:ShadowContainer>

									<!-- VerticalThumb -->
									<utu:ShadowContainer x:Name="VerticalThumbShadow">
										<Thumb x:Name="VerticalThumb"
											   Width="24"
											   Height="24"
											   AutomationProperties.AccessibilityView="Raw"
											   DataContext="{TemplateBinding Value}"
											   Style="{StaticResource NeumorphicSliderThumbStyle}" />
									</utu:ShadowContainer>
								</Grid>
							</Grid>
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region ToggleSwitch Style-->
	<Style x:Key="NeumorphicToggleSwitchStyle"
		   TargetType="ToggleSwitch">
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="ManipulationMode" Value="System,TranslateX" />
		<Setter Property="FocusVisualMargin" Value="0" />

		<Setter Property="OnContent" Value="{x:Null}" />
		<Setter Property="OffContent" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleSwitch">

					<Grid x:Name="RootGrid"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>

									</Storyboard>
								</VisualState>

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="SwitchKnobOnShadow.Visibility" Value="Visible" />
										<Setter Target="SwitchKnobOffShadow.Visibility" Value="Visible" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOnShadowFillPointerOver}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOffShadowFillPointerOver}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="SwitchKnobOnShadow.Visibility" Value="Visible" />
										<Setter Target="SwitchKnobOffShadow.Visibility" Value="Visible" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOnShadowFillFocused}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOffShadowFillFocused}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="KnobOn.Margin" Value="0" />
										<Setter Target="KnobOff.Margin" Value="0" />
										<Setter Target="KnobOn.CornerRadius" Value="{ThemeResource LargeThumbCornerRadius}" />
										<Setter Target="KnobOff.CornerRadius" Value="{ThemeResource LargeThumbCornerRadius}" />
										<Setter Target="SwitchKnobOn.Margin" Value="26,0,0,0" />
										<Setter Target="OnIconPresenterBorder.Margin" Value="0" />
										<Setter Target="SwitchKnobOnShadow.Visibility" Value="Visible" />
										<Setter Target="SwitchKnobOffShadow.Visibility" Value="Visible" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource LargeThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource LargeThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource LargeThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource LargeThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOnShadowFillPressed}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Fill">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource ToggleSwitchKnobOffShadowFillPressed}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="OnShadowPanel.Shadows" Value="{ThemeResource ToggleSwitchOnBorderDisabledShadows}" />
									</VisualState.Setters>
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																	   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource SurfaceVariantBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																	   Storyboard.TargetProperty="BorderBrush">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource OutlineVariantBrushDisabledBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																	   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource OnSurfaceDisabledBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource OnSurfaceLowBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="KnobOffBorder"
																	   Storyboard.TargetProperty="Opacity">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="0.25" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="KnobOnBorder"
																	   Storyboard.TargetProperty="Opacity">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="0.25" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource SurfaceBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOn"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{ThemeResource MediumThumbSize}" />
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="OnIconPresenter"
																	   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource OnSurfaceLowBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="OffIconPresenter"
																	   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="{ThemeResource SurfaceVariantBrush}" />
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Width"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="KnobOff"
																	   Storyboard.TargetProperty="Height"
																	   EnableDependentAnimation="True">
											<SplineDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchFasterAnimationDuration}"
																  KeySpline="{StaticResource MaterialToggleSwitchFastOutSlowInKeySpline}"
																  Value="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}" />
										</DoubleAnimationUsingKeyFrames>

									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="ToggleStates">
								<VisualStateGroup.Transitions>
									<VisualTransition x:Name="DraggingToOnTransition"
													  From="Dragging"
													  To="On"
													  GeneratedDuration="0">
										<Storyboard>
											<RepositionThemeAnimation TargetName="SwitchKnob"
																	  FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KnobCurrentToOnOffset}" />
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>

										</Storyboard>
									</VisualTransition>
									<VisualTransition x:Name="OnToDraggingTransition"
													  From="On"
													  To="Dragging"
													  GeneratedDuration="0">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="0"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="0"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="0"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="0"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="0"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition x:Name="DraggingToOffTransition"
													  From="Dragging"
													  To="Off"
													  GeneratedDuration="0">
										<Storyboard>
											<RepositionThemeAnimation TargetName="SwitchKnob"
																	  FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KnobCurrentToOffOffset}" />
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition x:Name="OnToOffTransition"
													  From="On"
													  To="Off"
													  GeneratedDuration="0">
										<Storyboard>
											<RepositionThemeAnimation TargetName="SwitchKnob"
																	  FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KnobOnToOffOffset}" />
											<!--#region uno#9507: UNO specific workaround to reset the states-->
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<!--#endregion-->
										</Storyboard>
									</VisualTransition>
									<VisualTransition x:Name="OffToOnTransition"
													  From="Off"
													  To="On"
													  GeneratedDuration="0">

										<Storyboard>
											<RepositionThemeAnimation TargetName="SwitchKnob"
																	  FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KnobOffToOnOffset}" />
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																		   Storyboard.TargetProperty="Opacity">
												<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																	  Value="0" />
											</DoubleAnimationUsingKeyFrames>

										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Dragging">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOnToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOffToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOnToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOffToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOnToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchIsOffToOpacity}}" />
										</DoubleAnimationUsingKeyFrames>

									</Storyboard>
								</VisualState>
								<VisualState x:Name="Off">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="0" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="1" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="0" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="1" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="On">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobBounds"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="1" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="0" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOn"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="1" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ShadowKnobOff"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="0" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="1" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow"
																	   Storyboard.TargetProperty="Opacity">
											<LinearDoubleKeyFrame KeyTime="{StaticResource MaterialToggleSwitchNormalAnimationDuration}"
																  Value="0" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>

						<Grid Grid.Row="1"
							  HorizontalAlignment="Left"
							  VerticalAlignment="Top">

							<!-- Off -->
							<Grid x:Name="OuterBorder"
								  Width="{ThemeResource SwitchKnobWidth}"
								  Height="{ThemeResource SwitchKnobHeight}"
								  CornerRadius="{ThemeResource SwitchKnobRadius}"
								  Background="{ThemeResource SurfaceBrush}"
								  BorderThickness="1"
								  BorderBrush="{ThemeResource OutlineVariantBrush}"
								  HorizontalAlignment="Center">
								<utu:ShadowContainer Shadows="{ThemeResource ToggleSwitchOffBorderShadows}">
									<Grid Width="{ThemeResource SwitchKnobWidth}"
										  Height="{ThemeResource SwitchKnobHeight}"
										  CornerRadius="{ThemeResource SwitchKnobRadius}"
										  HorizontalAlignment="Center" />
								</utu:ShadowContainer>
							</Grid>

							<!-- On -->
							<Grid x:Name="SwitchKnobBounds"
								  Width="{ThemeResource SwitchKnobWidth}"
								  Height="{ThemeResource SwitchKnobHeight}"
								  CornerRadius="{ThemeResource SwitchKnobRadius}"
								  Background="{ThemeResource PrimaryBrush}"
								  BorderThickness="1"
								  BorderBrush="{ThemeResource OutlineVariantBrush}"
								  HorizontalAlignment="Center"
								  Opacity="0">
								<utu:ShadowContainer x:Name="OnShadowPanel"
													 Shadows="{ThemeResource ToggleSwitchOnBorderShadows}">
									<Grid Width="{ThemeResource SwitchKnobWidth}"
										  Height="{ThemeResource SwitchKnobHeight}"
										  CornerRadius="{ThemeResource SwitchKnobRadius}"
										  HorizontalAlignment="Center" />
								</utu:ShadowContainer>
							</Grid>

							<Grid x:Name="SwitchKnob"
								  HorizontalAlignment="Left"
								  Width="{ThemeResource SwitchKnobIncludingOffShadowWidth}"
								  Height="{ThemeResource SwitchKnobHeight}"
								  CornerRadius="16">

								<!-- Switch Knob - On -->
								<Grid x:Name="SwitchKnobOn"
									  Width="{ThemeResource LargeThumbSize}"
									  Height="{ThemeResource LargeThumbSize}"
									  Margin="24,0,0,0"
									  CornerRadius="{ThemeResource LargeThumbCornerRadius}"
									  HorizontalAlignment="Left">

									<Border x:Name="KnobOnBorder">
										<utu:ShadowContainer x:Name="ShadowKnobOn"
															 Shadows="{ThemeResource ToggleSwitchKnobOnShadows}">
											<!-- Knob On -->
											<Border x:Name="KnobOn"
													Opacity="0"
													Width="{ThemeResource MediumThumbSize}"
													Height="{ThemeResource MediumThumbSize}"
													Margin="{ThemeResource KnobOnMargin}"
													VerticalAlignment="Center"
													HorizontalAlignment="Left"
													CornerRadius="12"
													Background="{ThemeResource SurfaceBrush}" />
										</utu:ShadowContainer>
									</Border>
									<!-- On Icon -->
									<Border x:Name="OnIconPresenterBorder"
											Height="{ThemeResource KnobIconSize}"
											Width="{ThemeResource KnobIconSize}"
											Padding="{ThemeResource KnobIconPadding}"
											Margin="4,0,0,0"
											VerticalAlignment="Center"
											HorizontalAlignment="Center">
										<Viewbox>
											<ContentPresenter x:Name="OnIconPresenter"
															  Content="{TemplateBinding OnContent}"
															  Visibility="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}}"
															  VerticalAlignment="Center"
															  HorizontalAlignment="Center"
															  VerticalContentAlignment="Center"
															  HorizontalContentAlignment="Center"
															  Foreground="{ThemeResource ToggleSwitchOnIconPresenterForeground}" />
										</Viewbox>
									</Border>
								</Grid>

								<!-- Switch Knob - Off -->
								<Grid x:Name="SwitchKnobOff"
									  Width="{ThemeResource LargeThumbSize}"
									  Height="{ThemeResource LargeThumbSize}"
									  Margin="{ThemeResource SwitchKnobOffMargin}"
									  CornerRadius="{ThemeResource LargeThumbCornerRadius}"
									  HorizontalAlignment="Right">

									<Border x:Name="KnobOffBorder">
										<utu:ShadowContainer x:Name="ShadowKnobOff"
															 Shadows="{ThemeResource ToggleSwitchKnobOffShadows}">
											<!-- Knob Off -->
											<Border x:Name="KnobOff"
													Background="{ThemeResource OnSurfaceVariantBrush}"
													Height="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}"
													Width="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentSize}}"
													Margin="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToContentMargin}}"
													VerticalAlignment="Center"
													HorizontalAlignment="Right"
													CornerRadius="{Binding OffContent, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToggleSwitchOffContentToCornerRadius}}" />
										</utu:ShadowContainer>
									</Border>
									<!-- Off Icon -->
									<Border Height="{ThemeResource KnobIconSize}"
											Width="{ThemeResource KnobIconSize}"
											Padding="{ThemeResource KnobIconPadding}"
											VerticalAlignment="Center"
											HorizontalAlignment="Center">
										<Viewbox>
											<ContentPresenter x:Name="OffIconPresenter"
															  Content="{TemplateBinding OffContent}"
															  Visibility="{Binding IsOn, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialTrueToCollapsed}}"
															  VerticalAlignment="Center"
															  HorizontalAlignment="Center"
															  VerticalContentAlignment="Center"
															  HorizontalContentAlignment="Center"
															  Foreground="{ThemeResource ToggleSwitchOffIconPresenterForeground}" />
										</Viewbox>
									</Border>
								</Grid>
							</Grid>
							<!-- On State Layer -->
							<Ellipse x:Name="SwitchKnobOnShadow"
									 Width="{ThemeResource SwitchKnobShadowSize}"
									 Height="{ThemeResource SwitchKnobShadowSize}"
									 Margin="{ThemeResource SwitchKnobOnShadowMargin}"
									 HorizontalAlignment="Center"
									 VerticalAlignment="Center"
									 Fill="{ThemeResource ToggleSwitchKnobOnShadowFill}"
									 Opacity="0" />

							<!-- Off State Layer -->
							<Ellipse x:Name="SwitchKnobOffShadow"
									 Width="{ThemeResource SwitchKnobShadowSize}"
									 Height="{ThemeResource SwitchKnobShadowSize}"
									 Margin="{ThemeResource SwitchKnobOffShadowMargin}"
									 HorizontalAlignment="Center"
									 VerticalAlignment="Center"
									 Fill="{ThemeResource ToggleSwitchKnobOffShadowFill}"
									 Opacity="0" />

							<!-- SwitchThumb -->
							<Thumb x:Name="SwitchThumb"
								   AutomationProperties.AccessibilityView="Raw">
								<Thumb.Template>
									<ControlTemplate TargetType="Thumb">
										<Rectangle Fill="{ThemeResource ToggleSwitchThumb}" />
									</ControlTemplate>
								</Thumb.Template>
							</Thumb>
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

</ResourceDictionary>
