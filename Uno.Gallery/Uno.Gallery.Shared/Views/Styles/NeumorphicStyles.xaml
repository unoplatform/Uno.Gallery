<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:utu="using:Uno.Toolkit.UI"
					xmlns:converters="using:Uno.Gallery.Converters"
					xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:um="using:Uno.Material">

	<ResourceDictionary.ThemeDictionaries>
		<ResourceDictionary x:Key="Dark">

			<!-- Shadow colors -->
			<Color x:Key="LightShadowColor">#3C3846</Color>
			<Color x:Key="ShadeShadowColor">#24222A</Color>

			<!--How are we dealing with the color names?-->
			
			<!--Some colors are only exist and are different on dark mode, ie Elevated Button-->
			<!--So we don't have a corresponding color for light mode-->
			<Color x:Key="LightShadowColor2">#615B71</Color>
			<Color x:Key="ShadeShadowColor2">#000000</Color>

			<Color x:Key="LightShadowColor3">#5F5B69</Color>
			<Color x:Key="ShadeShadowColor3">#24222A</Color>

			<!--For ToggleButton/IconButton it has a corresponding in Light Theme-->
			<Color x:Key="LightShadowColor4">#79718E</Color>
			<Color x:Key="ShadeShadowColor4">#000000</Color>

			<Color x:Key="LightShadowColor5">#E5DCFF</Color>
			<Color x:Key="ShadeShadowColor5">#A9A2D9</Color>

			<Color x:Key="LightShadowColor6">#F7F5FF</Color>
			<Color x:Key="ShadeShadowColor6">#584AB5</Color>

			<!--Corresponding to Light Used for FABTabBarItem-->
			<Color x:Key="LightShadowColor7">#A9A2D9</Color>
			<Color x:Key="MediumShadowColor7">#24222A</Color>
			<Color x:Key="ShadeShadowColor7">#000000</Color>

			<!--Elevated Button Shadows-->
			<utu:ShadowCollection x:Key="ElevatedNormal">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedHovered">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedPressed">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor4}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedDisabled">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor3}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor3}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedFocused">
				<utu:Shadow BlurRadius="48" IsInner="True" OffsetX="0" OffsetY="0" Opacity="0.24" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor4}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
			</utu:ShadowCollection>

			<!--Filled Button Shadows-->
			<utu:ShadowCollection x:Key="FilledNormal">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor5}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledHovered">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor5}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.7" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledPressed">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor5}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledDisabled">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor5}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledFocused">
				<utu:Shadow BlurRadius="48" IsInner="True" OffsetX="0" OffsetY="0" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor5}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor5}" />
			</utu:ShadowCollection>

			<!--FAB-->
			<utu:ShadowCollection x:Key="FabShadow">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.2" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
			</utu:ShadowCollection>

			<!--Chips-->
			<utu:ShadowCollection x:Key="ChipsShadows">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ChipsShadowsSelected">
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="1" OffsetY="1" Opacity="0.9" Spread="0" Color="{StaticResource ShadeShadowColor6}" />
				<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-1" OffsetY="-1" Opacity="0.9" Spread="0" Color="{StaticResource LightShadowColor6}" />
			</utu:ShadowCollection>
			
		</ResourceDictionary>
		<ResourceDictionary x:Key="Light">

			<!--How are we dealing with the color names?-->
			<!-- Shadow colors -->
			<Color x:Key="LightShadowColor">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor">#AEAEC0</Color>

			<Color x:Key="LightShadowColor2">#6651F2</Color>
			<Color x:Key="ShadeShadowColor2">#4C3CB3</Color>

			<!--For ToggleButton/IconButton it has a corresponding in Dark Theme-->
			<Color x:Key="LightShadowColor4">#FFFFFF</Color>
			<Color x:Key="ShadeShadowColor4">#AEAEC0</Color>

			<!--Corresponding to Dark Used for FABTabBarItem-->
			<Color x:Key="LightShadowColor7">#FFFFFF</Color>
			<Color x:Key="MediumShadowColor7">#AEAEC0</Color>
			<Color x:Key="ShadeShadowColor7">#170065</Color>

			<!--Elevated Button Shadows-->
			<utu:ShadowCollection x:Key="ElevatedNormal">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedHovered">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.5" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedPressed">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedDisabled">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="ElevatedFocused">
				<utu:Shadow BlurRadius="48" IsInner="True" OffsetX="0" OffsetY="0" Opacity="0.24" Spread="0" Color="{StaticResource ShadeShadowColor}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>

			<!--Filled Button Shadows-->
			<utu:ShadowCollection x:Key="FilledNormal">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledHovered">
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.5" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.7" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledPressed">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledDisabled">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>

			<utu:ShadowCollection x:Key="FilledFocused">
				<utu:Shadow BlurRadius="48" IsInner="True" OffsetX="0" OffsetY="0" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor2}" />
				<utu:Shadow BlurRadius="16" IsInner="False" OffsetX="4" OffsetY="4" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
			</utu:ShadowCollection>

			<!--FAB-->
			<utu:ShadowCollection x:Key="FabShadow">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.08" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor7}" />
				<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
			</utu:ShadowCollection>

			<!--Chips-->
			<utu:ShadowCollection x:Key="ChipsShadows">
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="-1" OffsetY="-1" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor}" />
				<utu:Shadow BlurRadius="4" IsInner="False" OffsetX="1" OffsetY="1" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor}" />
			</utu:ShadowCollection>
			<utu:ShadowCollection x:Key="ChipsShadowsSelected">
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="1" Spread="0" Color="{StaticResource ShadeShadowColor2}" />
				<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="1" Spread="0" Color="{StaticResource LightShadowColor2}" />
			</utu:ShadowCollection>
		</ResourceDictionary>
	</ResourceDictionary.ThemeDictionaries>

	<!--#region Shadow Collections -->
	<!--TextBox-->
	<utu:ShadowCollection x:Key="TextBoxShadows">
		<utu:Shadow OffsetX="4"
					OffsetY="4"
					BlurRadius="4"
					Color="{ThemeResource ShadeShadowColor}"
					Opacity="0.4"
					Spread="0"
					IsInner="True" />
		<utu:Shadow OffsetX="-4"
					OffsetY="-4"
					BlurRadius="4"
					Color="{ThemeResource LightShadowColor}"
					Opacity="0.4"
					Spread="0"
					IsInner="True" />
	</utu:ShadowCollection>

	<!--ToggleButton-->
	<utu:ShadowCollection x:Key="ToggleButtonShadow">
		<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
		<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
	</utu:ShadowCollection>

	<!--IconButton-->
	<utu:ShadowCollection x:Key="IconButtonShadows">
		<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="-2" OffsetY="-2" Opacity="0.8" Spread="0" Color="{StaticResource LightShadowColor4}" />
		<utu:Shadow BlurRadius="8" IsInner="False" OffsetX="2" OffsetY="2" Opacity="0.8" Spread="0" Color="{StaticResource ShadeShadowColor4}" />
	</utu:ShadowCollection>

	<!--ComboBox-->
	<utu:ShadowCollection x:Key="ComboboxShadow">
		<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
		<utu:Shadow BlurRadius="4" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
	</utu:ShadowCollection>

	<!--TabBar-->
	<utu:ShadowCollection x:Key="TabBarShadows">
		<utu:Shadow BlurRadius="48" IsInner="False" OffsetX="-8" OffsetY="-16" Opacity="0.6" Spread="0" Color="{StaticResource LightShadowColor}" />
		<utu:Shadow BlurRadius="32" IsInner="False" OffsetX="8" OffsetY="8" Opacity="0.6" Spread="0" Color="{StaticResource ShadeShadowColor}" />
	</utu:ShadowCollection>

	<!--TabBarItem-->
	<utu:ShadowCollection x:Key="TabBarItemShadows">
		<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="4" OffsetY="4" Opacity="0.4" Spread="0" Color="{StaticResource ShadeShadowColor}" />
		<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-4" OffsetY="-4" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor}" />
	</utu:ShadowCollection>
	<utu:ShadowCollection x:Key="FabTabBarItemShadows">
		<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="-8" OffsetY="-8" Opacity="0.08" Spread="0" Color="{StaticResource ShadeShadowColor7}" />
		<utu:Shadow BlurRadius="8" IsInner="True" OffsetX="8" OffsetY="8" Opacity="0.4" Spread="0" Color="{StaticResource LightShadowColor7}" />
		<utu:Shadow BlurRadius="20" IsInner="False" OffsetX="12" OffsetY="12" Opacity="0.4" Spread="0" Color="{StaticResource MediumShadowColor7}" />
	</utu:ShadowCollection>

	<utu:ShadowCollection x:Key="TabBarItemNoShadows"/>
	<!--#endregion-->
	<!-- Converters -->
	<um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY"
										NotNullOrEmptyValue="8"
										NullOrEmptyValue="0" />

	<!--#region TextBox Style -->
	<Style x:Key="NeumorphicTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceBrush}" />
		<Setter Property="PlaceholderForeground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="CornerRadius" Value="8" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodyLargeFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodyLargeFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodyLargeCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Padding" Value="16,16,14,16" />

		<Setter Property="MinHeight" Value="56" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<utu:ShadowContainer x:Name="RootPanel"
										 Shadows="{StaticResource TextBoxShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="IconPresenter.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="ContentElement.Opacity" Value="{ThemeResource DisabledOpacity}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Empty">
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinHeight}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}"
							  Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<!-- Border in place to properly vertically center the icon inside when it's a one-line TextBox -->
							<!-- but keep it in the same place and at the top when it's a multiline TextBox -->
							<Border Height="28"
									VerticalAlignment="Top">
								<ContentPresenter x:Name="IconPresenter"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  HorizontalAlignment="Center"
												  Width="20"
												  Margin="1,0,18,0"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
							</Border>

							<ScrollViewer x:Name="ContentElement"
										  Grid.Column="1"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
										  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
										  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
										  IsTabStop="False"
										  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
										  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  ZoomMode="Disabled"
										  AutomationProperties.AccessibilityView="Raw">
								<ScrollViewer.RenderTransform>
									<CompositeTransform x:Name="ContentElement_CompositeTransform" />
								</ScrollViewer.RenderTransform>
							</ScrollViewer>

							<!-- Border in place to properly vertically center the placeholder inside when it's a one-line TextBox -->
							<!-- but keep it in the same place and at the top when it's a multiline TextBox -->
							<Border Grid.Column="1"
									Height="28"
									VerticalAlignment="Top">
								<TextBlock x:Name="PlaceholderElement"
										   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   IsHitTestVisible="False"
										   RenderTransformOrigin="0,0.5"
										   Text="{TemplateBinding PlaceholderText}"
										   TextAlignment="{TemplateBinding TextAlignment}"
										   TextWrapping="{TemplateBinding TextWrapping}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<TextBlock.RenderTransform>
										<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
									</TextBlock.RenderTransform>
								</TextBlock>
							</Border>

							<Button x:Name="DeleteButton"
									Grid.Column="2"
									Margin="8,0,0,0"
									IsTabStop="False"
									Style="{StaticResource MaterialDeleteButtonStyle}"
									VerticalAlignment="Stretch"
									Visibility="Collapsed"
									AutomationProperties.AccessibilityView="Raw" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region ComboBox-->
	<Style x:Key="NmpComboBoxStyle"
		   TargetType="ComboBox">
		
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="16,16,14,16" />
		<Setter Property="MinHeight" Value="56" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource BodyLargeFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource BodyLargeFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource BodyLargeCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="TabNavigation" Value="Once" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
		<Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="True" />
		<Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
		<Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource MaterialComboBoxItemStyle}" />
		
		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<CarouselPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<utu:ShadowContainer x:Name="RootPanel" Shadows="{StaticResource ComboboxShadow}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ComboBoxContent.Background" Value="{ThemeResource SystemControlTransparentBrush}" />
										<Setter Target="DropDownGlyph_Down.Fill" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="UpperPlaceholderElement.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PopupBorder.Background" Value="{ThemeResource SystemControlTransparentBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOver"/>
								<VisualState x:Name="Pressed" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="FocusedDropDown" />
								<VisualState x:Name="Focused" />
								<VisualState x:Name="FocusedPressed" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>

							<VisualStateGroup x:Name="DropDownStates">
								<VisualState x:Name="Opened">
									<VisualState.Setters>
										<Setter Target="DropDownGlyph_Up.Fill" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="DropDownGlyph_Down.Visibility" Value="Collapsed" />
										<Setter Target="DropDownGlyph_Up.Visibility" Value="Visible" />
									</VisualState.Setters>
									<Storyboard>

										<SplitOpenThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 ClosedTargetName="ContentPresenter"
																 ContentTargetName="ScrollViewer"
																 ContentTranslationOffset="0"
																 OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																 OpenedTargetName="PopupBorder" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Closed">
									<VisualState.Setters>
										<Setter Target="DropDownGlyph_Down.Visibility" Value="Visible" />
										<Setter Target="DropDownGlyph_Up.Visibility" Value="Collapsed" />
									</VisualState.Setters>
									<Storyboard>
										<SplitCloseThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  ClosedTargetName="ContentPresenter"
																  ContentTargetName="ScrollViewer"
																  ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  ContentTranslationOffset="40"
																  OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																  OpenedTargetName="PopupBorder" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
							  Background="{TemplateBinding Background}"
							  CornerRadius="4"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinHeight}">

							<Grid x:Name="ComboBoxContent"
								  Padding="{TemplateBinding Padding}">
								<Grid.Resources>
									<!-- Resources added here in order to manage the ContentPresenter TranslateY depending if there is a PlaceholderText or not -->
									<CompositeTransform x:Key="ContentPresenter_CompositeTransformWithPlaceholder"
														TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToContentTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />

									<CompositeTransform x:Key="ContentPresenter_CompositeTransformWithoutPlaceholder"
														TranslateY="0" />

									<um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformConverter"
																		NotNullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithPlaceholder}"
																		NullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}" />
								</Grid.Resources>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!-- Leading Icon -->
								<ContentPresenter x:Name="IconPresenter"
												  Width="20"
												  Margin="2,0,18,0"
												  HorizontalAlignment="Center"
												  VerticalAlignment="Center"
												  Foreground="{ThemeResource OnSurfaceBrush}"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />

								<!-- ContentPresenter -->
								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  MaxLines="1"
												  VerticalAlignment="Center"
												  RenderTransform="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformConverter}, TargetNullValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}, FallbackValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}}" />

								<!-- PlaceholderElement -->
								<TextBlock x:Name="PlaceholderElement"
										   Grid.Column="1"
										   VerticalAlignment="Center"
										   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToVisible}, TargetNullValue=Collapsed, FallbackValue=Collapsed}"
										   Foreground="{ThemeResource OnSurfaceMediumBrush}"
										   IsHitTestVisible="False"
										   MaxLines="1"
										   RenderTransformOrigin="0,0.5"
										   Style="{StaticResource BodyLarge}"
										   Text="{TemplateBinding PlaceholderText}" />

								<TextBlock x:Name="UpperPlaceholderElement"
										   Grid.Column="1"
										   VerticalAlignment="Center"
										   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToCollapsed}, TargetNullValue=Collapsed, FallbackValue=Collapsed}"
										   Foreground="{ThemeResource OnSurfaceVariantBrush}"
										   IsHitTestVisible="False"
										   MaxLines="1"
										   RenderTransformOrigin="0,0.5"
										   Style="{StaticResource BodyLarge}"
										   Text="{TemplateBinding PlaceholderText}">
									<TextBlock.RenderTransform>
										<CompositeTransform x:Name="UpperPlaceholderElement_CompositeTransform"
															ScaleX="0.7"
															ScaleY="0.7"
															TranslateY="-11" />
									</TextBlock.RenderTransform>
								</TextBlock>

								<!-- Down -->
								<Path x:Name="DropDownGlyph_Down"
									  Grid.Column="2"
									  Width="10"
									  Height="5"
									  Margin="7,0"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Data="M0 0L5 5L10 0H0Z"
									  Fill="{ThemeResource OnSurfaceMediumBrush}"
									  Stretch="Uniform" />

								<!-- Up -->
								<Path x:Name="DropDownGlyph_Up"
									  Grid.Column="2"
									  Width="10"
									  Height="5"
									  Margin="7,0"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Data="M0 0L-5 -5L-10 0H0Z"
									  Fill="{ThemeResource OnSurfaceMediumBrush}"
									  Stretch="Uniform"
									  Visibility="Collapsed" />
							</Grid>

							<!-- Popup -->
							<Popup x:Name="Popup">
								<Border x:Name="PopupBorder"
										CornerRadius="4"
										Background="{ThemeResource SurfaceBrush}">

									<!-- Workaround for Issue #213 where android PopupBorder doesn't get redrawn properly, adds Background, CornerRadius and Border to ScrollViewer -->
									<ScrollViewer x:Name="ScrollViewer"
												  MinWidth="400"
												  AutomationProperties.AccessibilityView="Raw"
												  BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"
												  CornerRadius="4"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
												  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
												  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
												  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
												  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
												  VerticalSnapPointsAlignment="Near"
												  VerticalSnapPointsType="OptionalSingle"
												  ZoomMode="Disabled"
												  Foreground="{ThemeResource SystemControlTransparentBrush}"
												  BorderBrush="{ThemeResource SystemControlTransparentBrush}">
										<ItemsPresenter />
									</ScrollViewer>
								</Border>
							</Popup>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region BUTTONS-->

	<!--Elevated Style-->
	<Style x:Key="NmpElevatedButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground" Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Width" Value="117" />
		<Setter Property="Height" Value="38" />
		<Setter Property="MinHeight" Value="38" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedNormal}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedHovered}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedPressed}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedDisabled}" />
										<Setter Target="RootGrid.Background" Value="{StaticResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedFocused}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedHovered}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource ElevatedNormal}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="{TemplateBinding Height}"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinWidth}">

							<Grid CornerRadius="{TemplateBinding CornerRadius}"
								  Padding="{TemplateBinding Padding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<ContentPresenter x:Name="IconPresenter"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  MinWidth="{StaticResource ButtonIconMinWidth}"
												  HorizontalAlignment="{StaticResource ButtonIconHorizontalAlignment}"
												  VerticalAlignment="{StaticResource ButtonIconVerticalAlignment}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="{StaticResource ButtonContentMargin}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontSize="{TemplateBinding FontSize}"
												  FontWeight="{TemplateBinding FontWeight}"
												  CharacterSpacing="{TemplateBinding CharacterSpacing}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Filled Style-->
	<Style x:Key="NmpFilledButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
		<Setter Property="Background" Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="Width" Value="117" />
		<Setter Property="Height" Value="38" />
		<Setter Property="MinHeight" Value="38" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel" Shadows="{StaticResource FilledNormal}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal"/>

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource FilledHovered}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource FilledPressed}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource FilledDisabled}" />
										<Setter Target="RootGrid.Background" Value="{StaticResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnPrimaryLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{StaticResource OnPrimaryLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource FilledFocused}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{StaticResource FilledHovered}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="{TemplateBinding Height}"
							  Width="{TemplateBinding Width}"
							  MinHeight="{TemplateBinding MinWidth}">

							<Grid CornerRadius="{TemplateBinding CornerRadius}"
								  Padding="{TemplateBinding Padding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<ContentPresenter x:Name="IconPresenter"
												  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  MinWidth="{StaticResource ButtonIconMinWidth}"
												  HorizontalAlignment="{StaticResource ButtonIconHorizontalAlignment}"
												  VerticalAlignment="{StaticResource ButtonIconVerticalAlignment}"
												  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="{StaticResource ButtonContentMargin}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontSize="{TemplateBinding FontSize}"
												  FontWeight="{TemplateBinding FontWeight}"
												  CharacterSpacing="{TemplateBinding CharacterSpacing}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--FAB Style-->
	<Style x:Key="NmpFabStyle"
		   TargetType="Button">

		<Setter Property="Background"
				Value="{ThemeResource PrimaryContainerBrush}" />
		<Setter Property="Foreground"
				Value="{ThemeResource OnPrimaryContainerBrush}" />
		<Setter Property="FontFamily"
				Value="{StaticResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize"
				Value="{StaticResource MaterialFabFontSize}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="CornerRadius"
				Value="16" />
		<Setter Property="Padding"
				Value="16" />
		<Setter Property="MinHeight"
				Value="56" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel" Shadows="{StaticResource FabShadow}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootGrid.Background" Value="{ThemeResource OnPrimaryContainerHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled" />

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootGrid.Background" Value="{ThemeResource OnPrimaryContainerPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="RootGrid.Background" Value="{ThemeResource OnPrimaryContainerFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused" />

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="RootGrid"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}"
							  MinHeight="{TemplateBinding MinHeight}"
							  MinWidth="{TemplateBinding MinWidth}">

							<StackPanel x:Name="ContentPanel"
										Orientation="Horizontal"
										Margin="{TemplateBinding Padding}">

								<!-- Icon -->
								<Viewbox Height="16"
										 Width="16"
										 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										 Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
									<ContentPresenter Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
													  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
								</Viewbox>

								<!-- Icon/Content spacing -->
								<Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
									<Border Width="8"
											Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
								</Border>

								<!-- Content -->
								<ContentPresenter x:Name="ContentPresenter"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  CornerRadius="{StaticResource MaterialButtonCornerRadius}"
												  FontFamily="{TemplateBinding FontFamily}"
												  FontSize="{TemplateBinding FontSize}"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</StackPanel>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Small FAB Style-->
	<Style x:Key="NmpFabSmallStyle"
		   BasedOn="{StaticResource NmpFabStyle}"
		   TargetType="Button">

		<Setter Property="Padding"
				Value="12,0" />
		<Setter Property="MinHeight"
				Value="40" />
		<Setter Property="CornerRadius"
				Value="12" />
	</Style>

	<!--Large FAB Style-->
	<Style x:Key="NmpFabLargeStyle"
		   BasedOn="{StaticResource NmpFabStyle}"
		   TargetType="Button">

		<Setter Property="Padding"
				Value="40" />
		<Setter Property="MinHeight"
				Value="96" />
		<Setter Property="MinWidth"
				Value="96" />
		<Setter Property="CornerRadius"
				Value="28" />

		<!--Icon size should be 24x24-->
	</Style>
	<!--#endregion-->

	<!--#region ToggleButton-->
	<Style x:Key="NmpToggleButtonStyle"
				TargetType="ToggleButton">
		<Setter Property="Foreground"
					Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background"
					Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="MinHeight"
					Value="40" />
		<Setter Property="MinWidth"
					Value="40" />
		<Setter Property="UseSystemFocusVisuals"
					Value="True" />
		<Setter Property="HorizontalContentAlignment"
					Value="Center" />
		<Setter Property="VerticalContentAlignment"
					Value="Center" />
		<Setter Property="CornerRadius"
					Value="20" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.AlternateContent"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<utu:ShadowContainer x:Name="RootPanel" Shadows="{StaticResource ToggleButtonShadow}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<VisualState.Setters>
										<Setter Target="RootGrid.Background"
												Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="HoverOverlay.Opacity"
												Value="1" />
										<Setter Target="RootGrid.Background"
												Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="PressedOverlay.Opacity"
												Value="1" />
										<Setter Target="RootGrid.Background"
												Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="RootPanel.Opacity"
												Value="0.38" />
										<Setter Target="RootGrid.Background"
												Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>

								<!--Checked-->
								<VisualState x:Name="Checked">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground"
												Value="{ThemeResource OnPrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPointerOver">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground"
												Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="HoverOverlay.Opacity"
												Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPressed">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground"
												Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PressedOverlay.Opacity"
												Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedDisabled">
									<VisualState.Setters>

										<Setter Target="ContentPresenter.Visibility"
												Value="Collapsed" />
										<Setter Target="AlternateContentPresenter.Visibility"
												Value="Visible" />
										<Setter Target="AlternateContentPresenter.Foreground"
												Value="{ThemeResource OnPrimaryMediumBrush}" />
										<Setter Target="RootPanel.Opacity"
												Value="0.38" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="RootGrid"
							  Background="{ThemeResource PrimaryBrush}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Width="{TemplateBinding MinWidth}"
							  Height="{TemplateBinding MinHeight}">
							<!-- Ellipse for PointedOver State -->
							<Ellipse x:Name="HoverOverlay"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="Stretch"
									 Fill="{StaticResource PrimaryHoverBrush}"
									 Opacity="0"
									 Visibility="Visible"/>

							<!-- Ellipse for Pressed State -->
							<Ellipse x:Name="PressedOverlay"
									 HorizontalAlignment="Stretch"
									 VerticalAlignment="Stretch"
									 Fill="{StaticResource PrimaryPressedBrush}"
									 Opacity="0"
									 Visibility="Visible"/>

							<!-- Content -->
							<ContentPresenter x:Name="ContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{TemplateBinding Content}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />

							<!-- Alternate Content -->
							<ContentPresenter x:Name="AlternateContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{Binding Path=(um:ControlExtensions.AlternateContent), RelativeSource={RelativeSource TemplatedParent}}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
											  Foreground="{StaticResource OnPrimaryBrush}"
											  Visibility="Collapsed" />
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--endregion-->

	<!--#region IconButton-->
	
	<x:Double x:Key="IconButtonNmpOpacityVisibleState">1</x:Double>
	<x:String x:Key="IconButtonNmpEllipseVerticalAlignment">Stretch</x:String>
	<x:String x:Key="IconButtonNmpEllipseHorizontalAlignment">Stretch</x:String>

	<Style x:Key="NmpIconButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">
		<Setter Property="Foreground"
				Value="{ThemeResource OnSurfaceMediumBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="CornerRadius"
				Value="20" />
		<Setter Property="MinHeight"
				Value="40" />
		<Setter Property="MinWidth"
				Value="40" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<utu:ShadowContainer x:Name="RootPanel" Shadows="{StaticResource IconButtonShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="HoverOverlay.Opacity" Value="{ThemeResource IconButtonNmpOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PressedOverlay.Opacity" Value="{ThemeResource IconButtonNmpOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="FocusedOverlay.Opacity" Value="{ThemeResource IconButtonNmpOpacityVisibleState}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Opacity" Value="0.38" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="RootGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Width="{TemplateBinding MinWidth}"
							  Height="{TemplateBinding MinHeight}">
							<!-- Ellipse for PointerOver State -->
							<Ellipse x:Name="HoverOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNmpEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNmpEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillPointerOver}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Ellipse for Pressed State -->
							<Ellipse x:Name="PressedOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNmpEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNmpEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillPressed}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Ellipse for Focused State -->
							<Ellipse x:Name="FocusedOverlay"
									 HorizontalAlignment="{StaticResource IconButtonNmpEllipseHorizontalAlignment}"
									 VerticalAlignment="{StaticResource IconButtonNmpEllipseVerticalAlignment}"
									 Fill="{ThemeResource IconButtonEllipseFillFocused}"
									 Opacity="{ThemeResource IconButtonOpacityHiddenState}" />

							<!-- Content -->
							<ContentPresenter x:Name="ContentPresenter"
											  AutomationProperties.AccessibilityView="Raw"
											  Content="{TemplateBinding Content}"
											  ContentTemplate="{TemplateBinding ContentTemplate}"
											  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
											  Width="24"
											  Height="24"/>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Chips-->
	<Style x:Key="NmpChipStyle"
		   TargetType="utu:Chip">
		<Setter Property="Foreground"
				Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="CornerRadius"
				Value="8" />
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="8,0" />

		<Setter Property="Icon"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:Chip">
					<utu:ShadowContainer x:Name="RootPanel">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadows}" />
										<Setter Target="StateOverlay.Background" Value="Transparent" />
										<Setter Target="GridRoot.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadows}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfaceHoverBrush}" />
										<Setter Target="GridRoot.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadows}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfacePressedBrush}" />
										<Setter Target="GridRoot.Background" Value="{ThemeResource SurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadows}" />
										<Setter Target="RootPanel.Opacity" Value="0.38" />
										<Setter Target="GridRoot.Background" Value="{ThemeResource SurfaceBrush}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Checked">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadowsSelected}" />
										<Setter Target="StateOverlay.Background" Value="Transparent" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPointerOver">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadowsSelected}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryContainerHovered}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="CheckedPressed">
									<VisualState.Setters>
										<Setter Target="RootPanel.Shadows" Value="{ThemeResource ChipsShadowsSelected}" />
										<Setter Target="StateOverlay.Background" Value="{ThemeResource OnPrimaryContainerPressed}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="PART_RemoveButton.Foreground" Value="{ThemeResource OnPrimaryBrush}" />
										<Setter Target="CheckGlyphElement.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="GridRoot"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Height="32"
							  Margin="4"
							  Background="{TemplateBinding Background}">
							<Border x:Name="StateOverlay"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

							<Grid Padding="{TemplateBinding Padding}"
								  CornerRadius="{TemplateBinding CornerRadius}">
								<Grid.ColumnDefinitions>
									<!-- 0: Leading Icon, 1: Content: 2: Remove Button -->
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!-- C0: Leading Icon / Check Glyph -->
								<ContentPresenter x:Name="IconPresenter"
												  Grid.Column="0"
												  Width="18"
												  Height="18"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												  AutomationProperties.AccessibilityView="Raw"
												  Content="{TemplateBinding Icon}"
												  ContentTemplate="{TemplateBinding IconTemplate}"
												  Foreground="{ThemeResource OnSurfaceVariantBrush}"
												  Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed}" />

								<Grid x:Name="CheckGlyphElement"
									  Grid.Column="0"
									  Width="20"
									  Height="20"
									  Padding="2"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  Visibility="Collapsed">
									<Path HorizontalAlignment="Center"
										  VerticalAlignment="Center"
										  AutomationProperties.AccessibilityView="Raw"
										  Data="{StaticResource MaterialCheckGlyphPathData}"
										  Fill="{StaticResource OnPrimaryBrush}"
										  Stretch="Uniform"
										  Visibility="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}, FallbackValue=Collapsed}" />
								</Grid>

								<!-- C1: Content -->
								<ContentPresenter x:Name="ContentPresenter"
												  Grid.Column="1"
												  Margin="8,0"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  AutomationProperties.AccessibilityView="Raw"
												  CharacterSpacing="7"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  FontFamily="{ThemeResource MaterialMediumFontFamily}"
												  Foreground="{TemplateBinding Foreground}" />

								<!-- C2: Remove Button -->
								<Button x:Name="PART_RemoveButton"
										Grid.Column="2"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Foreground="{TemplateBinding Foreground}"
										Style="{StaticResource MaterialChipDeleteIconButtonStyle}"
										Visibility="{Binding CanRemove, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource MaterialTrueToVisible}, FallbackValue=Collapsed}" />
							</Grid>
						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region TabBar-->
	<Style x:Key="NmpBaseTabBarStyle"
		   BasedOn="{StaticResource DefaultTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="Width" Value="300" />
		<Setter Property="Height" Value="80" />
		<Setter Property="CornerRadius" Value="16,16,0,0" />
		<Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
		<Setter Property="um:ControlExtensions.TintedBackground" Value="{x:Null}" />
		<Setter Property="um:ControlExtensions.IsTintEnabled" Value="False" />
		<Setter Property="SelectionIndicatorPresenterStyle" Value="{StaticResource MaterialTabBarSelectionIndicatorPresenterStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBar">
					<utu:ShadowContainer Shadows="{StaticResource TabBarShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="OrientationStates">
								<VisualState x:Name="Horizontal">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Left" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Vertical">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="BelowSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
										<Setter Target="AboveSelectionIndicatorPresenter.VerticalContentAlignment" Value="Top" />
										<Setter Target="AboveSelectionIndicatorPresenter.HorizontalContentAlignment" Value="Stretch" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="IndicatorPlacementStates">
								<VisualState x:Name="Above" />
								<VisualState x:Name="Below">
									<VisualState.Setters>
										<Setter Target="BelowSelectionIndicatorPresenter.Visibility" Value="Visible" />
										<Setter Target="AboveSelectionIndicatorPresenter.Visibility" Value="Collapsed" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="TabBarGrid"
							  Background="{TemplateBinding Background}"
							  CornerRadius="{TemplateBinding CornerRadius}">
							<utu:TabBarSelectionIndicatorPresenter x:Name="BelowSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="BelowSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}"
																   Visibility="Collapsed" />
							<ItemsPresenter x:Name="TabBarItemsPresenter"
											Width="{TemplateBinding Width}"
											Height="{TemplateBinding Height}"
											Padding="{TemplateBinding Padding}" />
							<utu:TabBarSelectionIndicatorPresenter x:Name="AboveSelectionIndicatorPresenter"
																   Padding="{TemplateBinding Padding}"
																   AutomationProperties.AutomationId="AboveSelectionIndicatorPresenter"
																   Content="{TemplateBinding SelectionIndicatorContent}"
																   ContentTemplate="{TemplateBinding SelectionIndicatorContentTemplate}"
																   Foreground="{TemplateBinding Foreground}"
																   IndicatorTransitionMode="{TemplateBinding SelectionIndicatorTransitionMode}"
																   Opacity="0"
																   Owner="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																   Style="{TemplateBinding SelectionIndicatorPresenterStyle}" />

						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NmpVerticalTabBarStyle"
		   BasedOn="{StaticResource NmpBaseTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="Width" Value="80" />
		<Setter Property="Height" Value="320" />
		<Setter Property="CornerRadius" Value="40" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="{ThemeResource NavigationTabBarWidthOrHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="VisibleBounds" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NmpBaseNavigationTabBarItemStyle}" />
		<Setter Property="Orientation" Value="Vertical" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<utu:TabBarListPanel Orientation="Vertical" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NmpBottomTabBarStyle"
		   BasedOn="{StaticResource NmpBaseTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="VerticalAlignment" Value="Bottom" />
		<Setter Property="MinHeight" Value="{ThemeResource NavigationTabBarWidthOrHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="Bottom" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NmpBaseNavigationTabBarItemStyle}" />
	</Style>

	<Style x:Key="NmpTopTabBarStyle"
		   BasedOn="{StaticResource NmpBaseTabBarStyle}"
		   TargetType="utu:TabBar">
		<Setter Property="CornerRadius" Value="40" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="MinHeight" Value="{ThemeResource TopTabBarHeight}" />
		<Setter Property="utu:SafeArea.Insets" Value="Top" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource NmpBaseContentTabBarItemStyle}" />

	</Style>

	<!--#region TabBarItem-->
	
	<converters:FromNullToValueConverter x:Key="HasIconToContentShadow"
											 NotNullValue="{StaticResource TabBarItemNoShadows}"
											 NullValue="{StaticResource TabBarItemShadows}" />
	<Style x:Key="NmpBaseNavigationTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Padding" Value="{ThemeResource NavigationTabBarItemPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<Grid x:Name="LayoutRoot"
						  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalAlignment}"
						  Background="{TemplateBinding Background}"
						  Control.IsTemplateFocusTarget="True"
						  Padding="{TemplateBinding Padding}"
						  AutomationProperties.AccessibilityView="Raw"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<Grid x:Name="ContentGrid"
							  RowSpacing="4">
							<Grid.RowDefinitions>
								<RowDefinition x:Name="IconRow" Height="*" />
								<RowDefinition x:Name="ContentRow" Height="Auto" />
							</Grid.RowDefinitions>

							<utu:ShadowContainer x:Name="IconShadowPanel">
								<Grid x:Name="ActiveIndicator"
									  Width="{ThemeResource NavigationTabBarItemActiveIndicatorWidth}"
									  Height="{ThemeResource NavigationTabBarItemActiveIndicatorHeight}"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  CornerRadius="{ThemeResource NavigationTabBarItemActiveIndicatorCornerRadius}">

									<Border Width="{ThemeResource NavigationTabBarItemIconHeight}"
											Height="{ThemeResource NavigationTabBarItemIconHeight}"
											HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<Viewbox x:Name="IconBox" HorizontalAlignment="Center">
											<ContentPresenter x:Name="Icon"
															  Content="{TemplateBinding Icon}"
															  Foreground="{TemplateBinding Foreground}" />

										</Viewbox>
									</Border>

									<!--  BADGE  -->
									<!--  This part can be replaced when InfoBadge will be available in WinUI3  -->
									<!--  See this commit for the implementation: c935919b2c390014dd8509cc50e16b1549511ffa  -->
									<!--  (Related Branch: dev/agzi/I274-InfoBadgeImplementationForTBI)  -->

									<Grid Visibility="{TemplateBinding BadgeVisibility}">
										<!--  Small Badge  -->
										<Ellipse Width="{ThemeResource NavigationTabBarItemSmallBadgeWidth}"
												 Height="{ThemeResource NavigationTabBarItemSmallBadgeHeight}"
												 Margin="{ThemeResource NavigationTabBarItemSmallBadgeMargin}"
												 HorizontalAlignment="Right"
												 VerticalAlignment="Top"
												 Fill="{ThemeResource NavigationTabBarItemErrorBrush}"
												 Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}}" />


										<!--  Large Badge  -->
										<Border Height="{ThemeResource NavigationTabBarItemLargeBadgeHeight}"
												MinWidth="{ThemeResource NavigationTabBarItemLargeBadgeMinWidth}"
												Margin="{ThemeResource NavigationTabBarItemLargeBadgeMargin}"
												Padding="{ThemeResource NavigationTabBarItemLargeBadgePadding}"
												HorizontalAlignment="Left"
												VerticalAlignment="Top"
												Background="{ThemeResource NavigationTabBarItemErrorBrush}"
												CornerRadius="{ThemeResource NavigationTabBarItemLargeBadgeCornerRadius}"
												Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}">

											<TextBlock HorizontalAlignment="Center"
													   VerticalAlignment="Center"
													   Foreground="{ThemeResource NavigationTabBarItemOnErrorBrush}"
													   MaxLines="1"
													   Style="{StaticResource LabelExtraSmall}"
													   Text="{TemplateBinding BadgeValue}"
													   TextAlignment="Center" />

										</Border>
									</Grid>
								</Grid>
							</utu:ShadowContainer>

							<utu:ShadowContainer x:Name="ContentShadowPanel"
												 Grid.Row="1">
								<Grid x:Name="ContentPresenterGrid"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center">
									<Border HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<ContentPresenter x:Name="ContentPresenter"
														  Content="{TemplateBinding Content}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  Foreground="{TemplateBinding Foreground}"
														  TextWrapping="NoWrap"
														  HorizontalAlignment="Center"
														  VerticalAlignment="Center"/>
									</Border>
								</Grid>
							</utu:ShadowContainer>
						</Grid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="PointerStates">
								<VisualState x:Name="Normal" />
								<not_mobile:VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToContentShadow}}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToContentShadow}}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToContentShadow}}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<not_mobile:VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToContentShadow}}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="ContentShadowPanel.Shadows" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HasIconToContentShadow}}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationTabBarBackgroundDisabled}" />
										<Setter Target="ActiveIndicator.Background" Value="{ThemeResource NavigationTabBarItemActiveIndicatorBackgroundDisabled}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource NavigationTabBarItemIconForegroundDisabled}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationTabBarForegroundDisabled}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="TabBarIconPositionStates">
								<VisualState x:Name="IconOnTop"/>
								<VisualState x:Name="IconOnly">
									<VisualState.Setters>
										<Setter Target="ContentShadowPanel.Visibility" Value="Collapsed" />
										<Setter Target="ContentGrid.RowSpacing" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ContentOnly">
									<VisualState.Setters>
										<Setter Target="IconShadowPanel.Visibility" Value="Collapsed" />
										<Setter Target="ContentPresenterGrid.Height" Value="{ThemeResource NavigationTabBarItemActiveIndicatorHeight}" />
										<Setter Target="ContentPresenterGrid.Width" Value="{ThemeResource NavigationTabBarItemActiveIndicatorWidth}" />
										<Setter Target="ContentPresenterGrid.CornerRadius" Value="{ThemeResource NavigationTabBarItemActiveIndicatorCornerRadius}" />
										<Setter Target="ContentPresenter.HorizontalAlignment" Value="Center" />
										<Setter Target="ContentPresenter.VerticalAlignment" Value="Center" />
										<Setter Target="IconRow.Height" Value="0" />
										<Setter Target="ContentRow.Height" Value="*" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NmpBaseContentTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="Foreground" Value="{ThemeResource OnSurfaceVariantBrush}" />
		<Setter Property="Padding" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<Grid x:Name="LayoutRoot"
						  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalAlignment}"
						  Background="{TemplateBinding Background}"
						  Control.IsTemplateFocusTarget="True"
						  Padding="{TemplateBinding Padding}"
						  AutomationProperties.AccessibilityView="Raw"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<utu:ShadowContainer x:Name="ShadowPanel"
											 HorizontalAlignment="Center"
											 VerticalAlignment="Center">
							<Grid x:Name="ContentGrid"
								 HorizontalAlignment="Center"
								 VerticalAlignment="Center"
								 RowSpacing="4"
								 CornerRadius="64"
								 Padding="12,8">
								<Grid.RowDefinitions>
									<RowDefinition x:Name="IconRow" Height="*" />
									<RowDefinition x:Name="ContentRow" Height="*" />
								</Grid.RowDefinitions>

								<Grid x:Name="ActiveIndicator"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Width="24"
									  Height="24">

									<Border Width="{ThemeResource NavigationTabBarItemIconHeight}"
											Height="{ThemeResource NavigationTabBarItemIconHeight}"
											HorizontalAlignment="Center"
											VerticalAlignment="Center">
										<Viewbox x:Name="IconBox"
												 HorizontalAlignment="Center">
											<ContentPresenter x:Name="Icon"
															  Content="{TemplateBinding Icon}"
															  Foreground="{TemplateBinding Foreground}" />

										</Viewbox>
									</Border>

									<!--  BADGE  -->
									<!--  This part can be replaced when InfoBadge will be available in WinUI3  -->
									<!--  See this commit for the implementation: c935919b2c390014dd8509cc50e16b1549511ffa  -->
									<!--  (Related Branch: dev/agzi/I274-InfoBadgeImplementationForTBI)  -->

									<Grid Visibility="{TemplateBinding BadgeVisibility}">
										<!--  Small Badge  -->
										<Ellipse Width="{ThemeResource NavigationTabBarItemSmallBadgeWidth}"
												 Height="{ThemeResource NavigationTabBarItemSmallBadgeHeight}"
												 Margin="{ThemeResource NavigationTabBarItemSmallBadgeMargin}"
												 HorizontalAlignment="Right"
												 VerticalAlignment="Top"
												 Fill="{ThemeResource NavigationTabBarItemErrorBrush}"
												 Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToVisible}}" />


										<!--  Large Badge  -->
										<Border Height="{ThemeResource NavigationTabBarItemLargeBadgeHeight}"
												MinWidth="{ThemeResource NavigationTabBarItemLargeBadgeMinWidth}"
												Margin="{ThemeResource NavigationTabBarItemLargeBadgeMargin}"
												Padding="{ThemeResource NavigationTabBarItemLargeBadgePadding}"
												HorizontalAlignment="Left"
												VerticalAlignment="Top"
												Background="{ThemeResource NavigationTabBarItemErrorBrush}"
												CornerRadius="{ThemeResource NavigationTabBarItemLargeBadgeCornerRadius}"
												Visibility="{Binding BadgeValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}}">

											<TextBlock HorizontalAlignment="Center"
													   VerticalAlignment="Center"
													   Foreground="{ThemeResource NavigationTabBarItemOnErrorBrush}"
													   MaxLines="1"
													   Style="{StaticResource LabelExtraSmall}"
													   Text="{TemplateBinding BadgeValue}"
													   TextAlignment="Center" />

										</Border>
									</Grid>
								</Grid>

								<Grid x:Name="ContentPresenterGrid"
									  Grid.Row="1"
									  HorizontalAlignment="Center"
									  VerticalAlignment="Center"
									  Height="16">
									<Border HorizontalAlignment="Center"
												VerticalAlignment="Center">
										<ContentPresenter x:Name="ContentPresenter"
														  Content="{TemplateBinding Content}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  Foreground="{TemplateBinding Foreground}"
														  TextWrapping="NoWrap"
														  HorizontalAlignment="Center"
														  VerticalAlignment="Center"/>
									</Border>
								</Grid>
							</Grid>
						</utu:ShadowContainer>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="PointerStates">
								<VisualState x:Name="Normal" />
								<not_mobile:VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
								<not_mobile:VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</not_mobile:VisualState>
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="ShadowPanel.Shadows" Value="{StaticResource TabBarItemShadows}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource PrimaryBrush}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource PrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="DisabledStates">
								<VisualState x:Name="Enabled" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="LayoutRoot.Background" Value="{ThemeResource NavigationTabBarBackgroundDisabled}" />
										<Setter Target="Icon.Foreground" Value="{ThemeResource NavigationTabBarItemIconForegroundDisabled}" />
										<Setter Target="ContentPresenter.Foreground" Value="{ThemeResource NavigationTabBarForegroundDisabled}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="TabBarIconPositionStates">
								<VisualState x:Name="IconOnTop">
									<VisualState.Setters>
										<Setter Target="ContentGrid.Height" Value="70" />
										<Setter Target="ContentGrid.Width" Value="120" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="IconOnly">
									<VisualState.Setters>
										<Setter Target="ContentRow.Height" Value="0" />
										<Setter Target="ContentGrid.Height" Value="40" />
										<Setter Target="ContentGrid.Width" Value="80" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ContentOnly">
									<VisualState.Setters>
										<Setter Target="ContentGrid.Height" Value="40" />
										<Setter Target="ContentGrid.Width" Value="80" />
										<Setter Target="IconRow.Height" Value="0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="NmpFabTabBarItemStyle"
		   TargetType="utu:TabBarItem">
		<Setter Property="FontFamily" Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontSize" Value="{ThemeResource LabelMediumFontSize}" />
		<Setter Property="FontWeight" Value="{ThemeResource LabelMediumFontWeight}" />
		<Setter Property="IsSelectable" Value="False" />
		<Setter Property="UseSystemFocusVisuals" Value="True" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="CornerRadius" Value="64" />
		<Setter Property="Padding" Value="{ThemeResource FabTabBarItemPadding}" />
		<Setter Property="Background" Value="{ThemeResource PrimaryContainerColor}" />
		<Setter Property="Foreground" Value="{ThemeResource OnPrimaryContainerColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="utu:TabBarItem">
					<utu:ShadowContainer Shadows="{StaticResource FabTabBarItemShadows}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled" />

							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateOverlay.Background" Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid x:Name="Root"
							  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalAlignment}"
							  CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}">

							<Grid>
								<StackPanel x:Name="ContentPanel"
											Margin="{TemplateBinding Padding}"
											Orientation="Horizontal">

									<!--  Icon  -->
									<Viewbox Width="{ThemeResource FabTabBarItemContentWidthOrHeight}"
											 Height="{ThemeResource FabTabBarItemContentWidthOrHeight}"
											 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											 Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">

										<ContentPresenter x:Name="IconPresenter"
														  Content="{TemplateBinding Icon}"
														  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />

									</Viewbox>

									<!--  Icon/Content spacing  -->
									<Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
										<Border Width="{ThemeResource FabTabBarItemIconTextPadding}"
												Visibility="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
									</Border>

									<!--  Content  -->
									<ContentPresenter x:Name="ContentPresenter"
													  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													  Content="{TemplateBinding Content}"
													  ContentTemplate="{TemplateBinding ContentTemplate}"
													  ContentTransitions="{TemplateBinding ContentTransitions}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  FontWeight="{TemplateBinding FontWeight}" />

								</StackPanel>
							</Grid>
							<Border x:Name="StateOverlay"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

						</Grid>
					</utu:ShadowContainer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->
	
	<!--#endregion-->
</ResourceDictionary>
