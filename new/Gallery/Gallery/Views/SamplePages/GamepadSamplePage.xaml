<Page x:Class="Uno.Gallery.Views.Samples.GamepadSamplePage"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  xmlns:smtx="using:ShowMeTheXAML"
	  xmlns:local="using:Uno.Gallery"
	  xmlns:samples="using:Uno.Gallery.Views.Samples"
	  mc:Ignorable="d">

	<Page.Resources>
		<SolidColorBrush x:Key="ShapesStrokeColor">#A1A1A1</SolidColorBrush>
	</Page.Resources>

	<Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
		<local:SamplePageLayout IsDesignAgnostic="True">
			<local:SamplePageLayout.DesignAgnosticTemplate>
				<DataTemplate>
					<StackPanel>
						<smtx:XamlDisplay UniqueKey="GamepadSamplePage_Sample"
										  smtx:XamlDisplayExtensions.IgnorePath="XamlDisplay\StackPanel"
										  smtx:XamlDisplayExtensions.Header="Gamepad">
							<StackPanel Spacing="20">
								<!-- C# code
public ObservableCollection<GamepadViewModel> AvailableGamepads { get; } = new ObservableCollection<GamepadViewModel>();

private DispatcherTimer _timer = new DispatcherTimer();

public void StartObservingGamepadChanges()
{
	Gamepad.GamepadAdded += GamepadsChanged;
	Gamepad.GamepadRemoved += GamepadsChanged;

	_timer.Interval = TimeSpan.FromMilliseconds(100);
	_timer.Tick += OnGamepadReadingUpdate;
	_timer.Start();

	UpdateGamepads();
}

public void StopObservingGamepadChanges()
{
	Gamepad.GamepadAdded -= GamepadsChanged;
	Gamepad.GamepadRemoved -= GamepadsChanged;

	_timer.Stop();

	AvailableGamepads.Clear();
}


private void OnGamepadReadingUpdate(object sender, object e)
{
	UpdateGamepads();
	foreach(var gamepad in AvailableGamepads)
	{
		gamepad.Update();
		gamepad.Position = AvailableGamepads.IndexOf(gamepad)+1;
	}
}

private void GamepadsChanged(object sender, Gamepad e)
{
	UpdateGamepads();
}

private async void UpdateGamepads()
{
	await CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =>
	{
		var existingGamepads = new HashSet<Gamepad>(AvailableGamepads.Select(g => g.Gamepad));

		var gamepadsToRemove = existingGamepads.Except(Gamepad.Gamepads);
		var gamepadsToAdd = Gamepad.Gamepads.Except(existingGamepads);

		foreach(var gamepad in gamepadsToRemove)
		{
			var vmToRemove = AvailableGamepads.FirstOrDefault(g => g.Gamepad == gamepad);
			AvailableGamepads.Remove(vmToRemove);
		}

		foreach(var gamepad in gamepadsToAdd)
		{
			var vmToAdd = new GamepadViewModel(gamepad);
			AvailableGamepads.Add(vmToAdd);
		}
	});
}


public class GamepadViewModel : ViewModelBase
{
	public GamepadViewModel(Gamepad gamepad)
	{
		Gamepad = gamepad;
	}

	public int Position { get => GetProperty<int>(); set => SetProperty(value); }

	public Gamepad Gamepad { get; }

	public void Update()
	{
		var reading = Gamepad.GetCurrentReading();

		Buttons = reading.Buttons.ToString("g");

			LeftThumbstickX = reading.LeftThumbstickX.ToString("0.00");
			LeftThumbstickY = reading.LeftThumbstickY.ToString("0.00");
			RightThumbstickX = reading.RightThumbstickX.ToString("0.00");
			RightThumbstickY = reading.RightThumbstickY.ToString("0.00");

			ButtonA = Buttons.Contains("A");
			ButtonX = Buttons.Contains("X");
			ButtonY = Buttons.Contains("Y");
			ButtonB = Buttons.Contains("B");

			DPadDown = Buttons.Contains("DPadDown");
			DPadLeft = Buttons.Contains("DPadLeft");
			DPadUp = Buttons.Contains("DPadUp");
			DPadRight = Buttons.Contains("DPadRight");

			ButtonView = Buttons.Contains("View");
			ButtonMenu = Buttons.Contains("Menu");

			ButtonPaddle1 = Buttons.Contains("Paddle1");
			ButtonPaddle2 = Buttons.Contains("Paddle2");
			ButtonPaddle3 = Buttons.Contains("Paddle3");
			ButtonPaddle4 = Buttons.Contains("Paddle4");

			ButtonLeftShoulder = Buttons.Contains("LeftShoulder");
			ButtonRightShoulder = Buttons.Contains("RightShoulder");

			ButtonLeftThumbstick = Buttons.Contains("LeftThumbstick");
			ButtonRightThumbstick = Buttons.Contains("RightThumbstick");

			LeftThumbstickXImage = reading.LeftThumbstickX * 6 + 75;
			LeftThumbstickYImage = reading.LeftThumbstickY * (-6) + 49;
			RightThumbstickXImage = reading.RightThumbstickX * 6 + 141;
			RightThumbstickYImage = reading.RightThumbstickY * (-6) + 80;

			LeftTrigger = reading.LeftTrigger.ToString("0.00");
			RightTrigger = reading.RightTrigger.ToString("0.00");
	}

		public string Buttons { get => GetProperty<string>(); private set => SetProperty(value); }

		public string LeftThumbstickX { get => GetProperty<string>(); private set => SetProperty(value); }
		public string LeftThumbstickY { get => GetProperty<string>(); private set => SetProperty(value); }
		public string RightThumbstickX { get => GetProperty<string>(); private set => SetProperty(value); }
		public string RightThumbstickY { get => GetProperty<string>(); private set => SetProperty(value); }

		public string LeftTrigger { get => GetProperty<string>(); private set => SetProperty(value); }
		public string RightTrigger { get => GetProperty<string>(); private set => SetProperty(value); }

		public bool ButtonLeftThumbstick { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonRightThumbstick { get => GetProperty<bool>(); private set => SetProperty(value); }

		public double LeftThumbstickXImage { get => GetProperty<double>(); private set => SetProperty(value); }
		public double LeftThumbstickYImage { get => GetProperty<double>(); private set => SetProperty(value); }
		public double RightThumbstickXImage { get => GetProperty<double>(); private set => SetProperty(value); }
		public double RightThumbstickYImage { get => GetProperty<double>(); private set => SetProperty(value); }

		public bool ButtonA { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonX { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonY { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonB { get => GetProperty<bool>(); private set => SetProperty(value); }

		public bool DPadDown { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool DPadLeft { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool DPadUp { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool DPadRight { get => GetProperty<bool>(); private set => SetProperty(value); }

		public bool ButtonView { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonMenu { get => GetProperty<bool>(); private set => SetProperty(value); }

		public bool ButtonPaddle1 { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonPaddle2 { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonPaddle3 { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonPaddle4 { get => GetProperty<bool>(); private set => SetProperty(value); }

		public bool ButtonLeftShoulder { get => GetProperty<bool>(); private set => SetProperty(value); }
		public bool ButtonRightShoulder { get => GetProperty<bool>(); private set => SetProperty(value); }
}
-->

								<Button Click="CheckChangeObservation_Click"
										Content="{Binding Data.ButtonText}" />

								<ListView ItemsSource="{Binding Data.AvailableGamepads, Mode=OneWay}"
										  SelectionMode="None">
									<ListView.ItemTemplate>
										<DataTemplate x:DataType="samples:GamepadViewModel"
													  x:DefaultBindMode="OneWay">
											<UserControl>
												<Grid Margin="0,20">
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="*" />
														<ColumnDefinition Width="auto" />
													</Grid.ColumnDefinitions>
													<Grid.RowDefinitions>
														<RowDefinition Height="auto" />
														<RowDefinition x:Name="rowTwo"
																	   Height="20" />
														<RowDefinition Height="auto" />
													</Grid.RowDefinitions>

													<VisualStateManager.VisualStateGroups>
														<VisualStateGroup>
															<VisualState x:Name="WideState">
																<VisualState.StateTriggers>
																	<AdaptiveTrigger MinWindowWidth="950" />
																</VisualState.StateTriggers>
																<VisualState.Setters>
																	<Setter Target="visualGamepad.(Grid.Column)"
																			Value="1" />
																	<Setter Target="rowTwo.Height"
																			Value="0" />
																	<Setter Target="visualGamepad.HorizontalAlignment"
																			Value="Right" />
																</VisualState.Setters>
															</VisualState>
															<VisualState x:Name="NarrowState">
																<VisualState.StateTriggers>
																	<AdaptiveTrigger MinWindowWidth="0" />
																</VisualState.StateTriggers>
																<VisualState.Setters>
																	<Setter Target="visualGamepad.(Grid.Row)"
																			Value="2" />
																	<Setter Target="rowTwo.Height"
																			Value="30" />
																	<Setter Target="visualGamepad.(Grid.Column)"
																			Value="0" />
																	<Setter Target="visualGamepad.HorizontalAlignment"
																			Value="Left" />
																</VisualState.Setters>
															</VisualState>
														</VisualStateGroup>
													</VisualStateManager.VisualStateGroups>

													<StackPanel Spacing="8"
																HorizontalAlignment="Stretch">

														<TextBlock Style="{ThemeResource SubtitleTextBlockStyle}">
															<Run Text="Gamepad" />
															<Run Text="{x:Bind Position}" />
														</TextBlock>
														<TextBlock TextWrapping="WrapWholeWords">
															<Run Text="Buttons: "
																 FontWeight="Bold" />
															<Run Text="{Binding Buttons}" />
														</TextBlock>

														<TextBlock TextWrapping="WrapWholeWords">
															<Run Text="Left Thumbstick: "
																 FontWeight="Bold" />
															<Run Text="X" />
															<Run Text="{Binding LeftThumbstickX}" />
															<Run Text="Y" />
															<Run Text="{Binding LeftThumbstickY}" />
														</TextBlock>

														<TextBlock TextWrapping="WrapWholeWords">
															<Run Text="Right Thumbstick: "
																 FontWeight="Bold" />
															<Run Text="X" />
															<Run Text="{Binding RightThumbstickX}" />
															<Run Text="Y" />
															<Run Text="{Binding RightThumbstickY}" />
														</TextBlock>

														<TextBlock TextWrapping="WrapWholeWords">
															<Run Text="Left Trigger: "
																 FontWeight="Bold" />
															<Run Text="{Binding LeftTrigger}" />
														</TextBlock>

														<TextBlock TextWrapping="WrapWholeWords">
															<Run Text="Right Trigger: "
																 FontWeight="Bold" />
															<Run Text="{Binding RightTrigger}" />
														</TextBlock>
													</StackPanel>

													<Canvas x:Name="visualGamepad"
															Width="260"
															Height="150"
															HorizontalAlignment="Left"
															Grid.Column="1">
														<Image Source="ms-appx:///Assets/Gamepad.svg"
															   Height="121"
															   Canvas.Top="29"
															   Canvas.Left="41" />

														<!--Thumbsticks-->
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="20"
																 Height="20"
																 Fill="{Binding ButtonLeftThumbstick, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="{Binding LeftThumbstickXImage}"
																 Canvas.Top="{Binding LeftThumbstickYImage}" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="20"
														         Height="20"
														         Fill="{Binding ButtonRightThumbstick, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="{Binding RightThumbstickXImage}"
														         Canvas.Top="{Binding RightThumbstickYImage}" />

														<!--AXYB Buttons-->
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="11"
														         Height="11"
														         Fill="{Binding ButtonA, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="166.5"
														         Canvas.Top="63" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="11"
														         Height="11"
														         Fill="{Binding ButtonX, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="157"
														         Canvas.Top="53" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="11"
														         Height="11"
														         Fill="{Binding ButtonY, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="166.5"
														         Canvas.Top="43" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="11"
														         Height="11"
														         Fill="{Binding ButtonB, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="177"
														         Canvas.Top="53" />

														<!--DPad-->
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
														         StrokeThickness="2"
														         Width="11"
														         Height="11"
														         Fill="{Binding DPadDown, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
														         Canvas.Left="100"
														         Canvas.Top="93" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="11"
																 Height="11"
																 Fill="{Binding DPadLeft, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="90"
																 Canvas.Top="83" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="11"
																 Height="11"
																 Fill="{Binding DPadUp, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="100"
																 Canvas.Top="73" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="11"
																 Height="11"
																 Fill="{Binding DPadRight, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="110"
																 Canvas.Top="83" />

														<!--View and Menu-->
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="10"
																 Height="10"
																 Fill="{Binding ButtonView, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="110"
																 Canvas.Top="55" />
														<Ellipse Stroke="{StaticResource ShapesStrokeColor}"
																 StrokeThickness="2"
																 Width="10"
																 Height="10"
																 Fill="{Binding ButtonMenu, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																 Canvas.Left="136"
																 Canvas.Top="55" />

														<!--Paddles-->
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonPaddle1, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="93"
																   Canvas.Top="128" />
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonPaddle2, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="93"
																   Canvas.Top="142" />
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonPaddle3, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="139"
																   Canvas.Top="128" />
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonPaddle4, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="139"
																   Canvas.Top="142" />

														<!--Shoulder Buttons-->
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonLeftShoulder, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="77"
																   Canvas.Top="19" />
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   RadiusX="3"
																   RadiusY="3"
																   Width="25"
																   Height="8"
																   Fill="{Binding ButtonRightShoulder, Converter={StaticResource TrueToFilled}, FallbackValue=Transparent}"
																   Canvas.Left="155"
																   Canvas.Top="19" />

														<!--Triggers-->
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   Width="13"
																   Height="17"
																   RadiusX="6"
																   RadiusY="6"
																   Canvas.Left="89">
															<Rectangle.Fill>
																<SolidColorBrush Color="#A1A1A1"
																				 Opacity="{Binding LeftTrigger}" />

															</Rectangle.Fill>
														</Rectangle>
														<Rectangle Stroke="{StaticResource ShapesStrokeColor}"
																   StrokeThickness="2"
																   Width="13"
																   Height="17"
																   RadiusX="6"
																   RadiusY="6"
																   Canvas.Left="155">
															<Rectangle.Fill>
																<SolidColorBrush Color="#A1A1A1"
																				 Opacity="{Binding RightTrigger}" />

															</Rectangle.Fill>
														</Rectangle>
													</Canvas>
												</Grid>
											</UserControl>
										</DataTemplate>
									</ListView.ItemTemplate>
								</ListView>
							</StackPanel>
						</smtx:XamlDisplay>
					</StackPanel>
				</DataTemplate>
			</local:SamplePageLayout.DesignAgnosticTemplate>

		</local:SamplePageLayout>
	</Grid>
</Page>
