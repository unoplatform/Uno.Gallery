<Page x:Class="Uno.Gallery.Views.Samples.EmailManagerSamplePage"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  xmlns:smtx="using:ShowMeTheXAML"
	  xmlns:local="using:Uno.Gallery"
	  mc:Ignorable="d">

	<Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
		<local:SamplePageLayout>

			<local:SamplePageLayout.FluentTemplate>
				<DataTemplate>
					<smtx:XamlDisplay UniqueKey="EmailManagerSamplePage_Sample"
									  smtx:XamlDisplayExtensions.Header="Email Manager">
						<StackPanel Spacing="12">
							<TextBox Header="To"
									 Text="{Binding Data.To, Mode=TwoWay}"
									 PlaceholderText="info@platform.uno, hello@platform.uno"
									 Description="Additional addresses can be added by separating them with commas." />
							<TextBox Header="CC"
									 Text="{Binding Data.CC, Mode=TwoWay}"
									 PlaceholderText="info@platform.uno" />
							<TextBox Header="BCC"
									 Text="{Binding Data.BCC, Mode=TwoWay}"
									 PlaceholderText="secret-mail@platform.uno" />
							<TextBox Header="Subject"
									 Text="{Binding Data.Subject, Mode=TwoWay}"
									 PlaceholderText="Designing Dream Layer Mazes" />
							<TextBox Header="Body"
									 Text="{Binding Data.Body, Mode=TwoWay}"
									 VerticalContentAlignment="Top"
									 PlaceholderText="Ariadne,&#x0a;&#x0a;I have a unique opportunity that I believe will pique your intellectual curiosity. It involves designing three complete dream layer mazes for a specific job. Are you interested in hearing more? &#x0a;&#x0a;- Dom"
									 AcceptsReturn="True"
									 TextWrapping="Wrap"
									 MinHeight="160"
									 MaxHeight="200"
									 ScrollViewer.VerticalScrollBarVisibility="Auto">
							</TextBox>
							<Button Content="Compose"
									Style="{StaticResource AccentButtonStyle}"
									Command="{Binding Data.ComposeCommand}"
									Margin="0,10,0,0" />

<!-- C# Code
private async void Compose()
{
	try
	{
		// Subject and Body null/empty checked here in order to show a controlled message instead of generic "Value cannot be null" error.
		if (string.IsNullOrWhiteSpace(Subject)) throw new Exception("The subject cannot be empty.");
		if (string.IsNullOrWhiteSpace(Body)) throw new Exception("The body cannot be empty.");

		var email = new EmailMessage
		{
			Subject = Subject,
			Body = Body
		};
		AddCSVToEmailRecipients(To, email.To);
		AddCSVToEmailRecipients(CC, email.CC);
		AddCSVToEmailRecipients(BCC, email.Bcc);

		await EmailManager.ShowComposeNewEmailAsync(email);
	}
	catch(Exception ex)
	{
		ContentDialog errorDialog = new ContentDialog
		{
			Title = "Error",
			Content = "Error trying to fire show compose new email: " + Environment.NewLine + ex.Message,
			CloseButtonText = "OK"
		};
		await errorDialog.ShowAsync();
	}
}

private void AddCSVToEmailRecipients(string csvAddresses, IList<EmailRecipient> target)
{
	// Not all platforms in all the projects supports the StringSplitOptions.TrimEntries, so we trim each item afterwards and filter to ensure not empty addresses
	var addresses = csvAddresses?.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(address => address.Trim()).Where(address => !string.IsNullOrWhiteSpace(address)).ToList();
	// Add each address to target list
	addresses?.ForEach(address =>
	{
		target.Add(new EmailRecipient(address));
	});
}
-->
						</StackPanel>
					</smtx:XamlDisplay>
				</DataTemplate>
			</local:SamplePageLayout.FluentTemplate>
		</local:SamplePageLayout>
	</Grid>
</Page>

