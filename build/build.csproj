<Project DefaultTargets="BuildVersion">
	<PropertyGroup>
		<AppName>Uno.Gallery</AppName>
	</PropertyGroup>
	
	<Target Name="BuildVersion"
					Condition="'$(NBGV_InformationalVersion)'!=''">
		<Message Text="%0A#### Running BuildVersion"
                     Importance="$(_MessageImportance)" />

		<Exec Command="git rev-list --count HEAD"
                Condition="'$(_BuildNumber)' == ''"
                ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput"
                      PropertyName="_BuildNumber" />
		</Exec>

		<PropertyGroup>
			<_VersionCode>$(_BuildNumber)</_VersionCode>
			<_BuildNumber Condition="$(BuildNumberOffset) != ''">$([MSBuild]::Add($(_BuildNumber), $(BuildNumberOffset)))</_BuildNumber>
			<_VersionCode Condition="$(VersionCodeOffset) != ''">$([MSBuild]::Add($(_BuildNumber), $(VersionCodeOffset)))</_VersionCode>
			<_VersionCode Condition="$(VersionCodeOffset) != ''">$([MSBuild]::Add($(_VersionCode), $([System.DateTime]::Now.ToString(`yyMMddHHmm`))))</_VersionCode>
			<_VersionCode Condition="$(VersionCodeOffset) != ''">$([MSBuild]::Subtract($(_VersionCode), '2200000000'))</_VersionCode>
			<_AppleBuildNumber Condition="$(_AppleBuildNumber) == ''">$([System.DateTime]::Now.ToString(`yyMMddHHmm`)).$(_BuildNumber)</_AppleBuildNumber>
			<_InformationalVersion>$(PackageInformationalVersion)</_InformationalVersion>
			<_InformationalVersion Condition="'$(_InformationalVersion)' == ''">$(NBGV_InformationalVersion)</_InformationalVersion>
			<_AppVersion>$(_AppVersion)</_AppVersion>
			<_AppVersion Condition="'$(_AppVersion)'==''">$(NBGV_SimpleVersion)</_AppVersion>
		</PropertyGroup>

		<Error Condition="'$(_InformationalVersion)'=='' Or '$(_AppVersion)'==''"
                 Text="Failed to calculate version. You must either run GitVersion before building the application or set both AppVersion and InformationalVersion variables."/>

		<!-- App version without revision -->
		<PropertyGroup Condition="'$(IncludeBuildInVersion)' == 'True'">
			<_AppVersion>$(NBGV_SimpleVersion)</_AppVersion>
		</PropertyGroup>

		<!-- Pad the version in case it's too short -->
		<PropertyGroup Condition="'$(IncludeBuildInVersion)' != 'True'">
			<_AppVersion Condition="$(_AppVersion.Split('.').length) == 1">$(_AppVersion).0.0</_AppVersion>
			<_AppVersion Condition="$(_AppVersion.Split('.').length) == 2">$(_AppVersion).0</_AppVersion>
		</PropertyGroup>

		<Message Text="App version : $(_AppVersion)"
                     Importance="$(_MessageImportance)" />
		<Message Text="Build number : $(_BuildNumber)"
                     Importance="$(_MessageImportance)" />
		<Message Text="Informational version : $(_InformationalVersion)"
                     Importance="$(_MessageImportance)" />

		<Message Text="#### Done running BuildVersion"
                     Importance="$(_MessageImportance)" />
		<Message Text="%0A"
                     Importance="$(_MessageImportance)" />

		<PropertyGroup>
			<_SourceBasePath>$(MSBuildThisFileDirectory)../$(AppName)</_SourceBasePath>
			<_AppxManifestPath>$(_SourceBasePath)/Package.appxmanifest</_AppxManifestPath>
			<_MobileAndroidManifestPath>$(_SourceBasePath)/Platforms/Android/AndroidManifest.xml</_MobileAndroidManifestPath>
			<UnoMacOSCustomInfoPlist>$(_SourceBasePath)/Platforms/MacCatalyst/Info.plist</UnoMacOSCustomInfoPlist>
			<_MobileiOSPlistFilePath>$(_SourceBasePath)/Platforms/iOS/Info.plist</_MobileiOSPlistFilePath>

			<_AndroidNamespace>
				<Namespace Prefix="android" Uri="http://schemas.android.com/apk/res/android" />
			</_AndroidNamespace>
			<_WindowsNamespace>
				<Namespace Prefix="x" Uri="http://schemas.microsoft.com/appx/manifest/foundation/windows10" />
			</_WindowsNamespace>
		</PropertyGroup>

		<Message Text="Updating Package versions" />
		<Message Text="_AppVersion: $(_AppVersion) _BuildNumber: $(_BuildNumber) _AppleBuildNumber: $(_AppleBuildNumber) _VersionCode: $(_VersionCode)" Importance="high" />

		<!-- Android -->
		<XmlPoke 
            XmlInputPath="$(_MobileAndroidManifestPath)"
            Query="/manifest/@android:versionName"
            Value="$(_AppVersion)"
            Namespaces="$(_AndroidNamespace)" />

		<XmlPoke 
            XmlInputPath="$(_MobileAndroidManifestPath)"
            Query="/manifest/@android:versionCode"
            Value="$(_VersionCode)"
            Namespaces="$(_AndroidNamespace)" />

		<!-- macOS -->
		<!-- Using our own _XmlUpdate instead of XmlPoke to avoid unnecessary (and possibly breaking) changes in the plist -->
		<_XmlUpdate 
            XmlFileName="$(UnoMacOSCustomInfoPlist)"
            XPath="//plist/dict/key[text() = 'CFBundleShortVersionString']/following-sibling::string[1]"
            Value="$(_AppVersion)" />

		<_XmlUpdate 
            XmlFileName="$(UnoMacOSCustomInfoPlist)"
            XPath="//plist/dict/key[text() = 'CFBundleVersion']/following-sibling::string[1]"
            Value="$(_AppleBuildNumber)" />

		<!-- iOS -->
		<!-- Using our own _XmlUpdate instead of XmlPoke to avoid unnecessary (and possibly breaking) changes in the plist -->
		<_XmlUpdate 
            XmlFileName="$(_MobileiOSPlistFilePath)"
            XPath="//plist/dict/key[text() = 'CFBundleShortVersionString']/following-sibling::string[1]"
            Value="$(_AppVersion)" />

		<_XmlUpdate 
			Condition="Exists('$(_MobileiOSPlistFilePath)')"
            XmlFileName="$(_MobileiOSPlistFilePath)"
            XPath="//plist/dict/key[text() = 'CFBundleVersion']/following-sibling::string[1]"
            Value="$(_AppleBuildNumber)" />

		<!-- Windows -->
		<ItemGroup>
			<_Major Include="$(_AppVersion.Split('.')[0])" />
			<_Minor Include="$(_AppVersion.Split('.')[1])" />
			<_Revision Include="$(_AppVersion.Split('.')[2])" />
		</ItemGroup>

		<!-- Forcing the inclusion of the build number in Windows as the standard format is Major.Minor.Build.Revision -->
		<!-- Not doing this makes it impossible to update a package unless the version is updated -->
		<PropertyGroup>
			<_WindowsVersion>@(_Major).@(_Minor).$(_BuildNumber).@(_Revision)</_WindowsVersion>
		</PropertyGroup>

		<XmlPoke 
			XmlInputPath="$(_AppxManifestPath)"
            Query="/x:Package/x:Identity/@Version"
            Value="$(_WindowsVersion)"
            Namespaces="$(_WindowsNamespace)" />
	</Target>

	<UsingTask TaskName="_XmlUpdate"
			   TaskFactory="RoslynCodeTaskFactory"
			   AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<XmlFileName Required="True" />
			<XPath Required="True" />
			<Value Required="True" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System"/>
			<Using Namespace="System.Xml.XPath"/>
			<!-- The following code is from the MSBuildTasks library (https://github.com/loresoft/msbuildtasks/blob/6196d43e7eb6807f306e9861b286fe61c8bb0993/Source/MSBuild.Community.Tasks/XmlUpdate.cs) -->
			<!-- MSBuildTasks is not used as it brings a Zip tasks that conflicts with Xamarin's -->
			<Code Type="Fragment" Language="cs">
				<![CDATA[
						System.Xml.Linq.XDocument xdoc = System.Xml.Linq.XDocument.Load(XmlFileName);
						System.Xml.XmlNamespaceManager manager = new System.Xml.XmlNamespaceManager(new System.Xml.NameTable());

						var items = xdoc.XPathEvaluate(XPath, manager) as System.Collections.Generic.IEnumerable<object>;

						Log.LogMessage("Updating " + items.Count() + " nodes in " + XmlFileName);

						foreach (var item in items.ToArray())
						{
								var attr = item as System.Xml.Linq.XAttribute;
								if (attr != null)
								{
									attr.SetValue(Value);
								}

								var ele = item as System.Xml.Linq.XElement;
								if (ele != null)
								{
									ele.SetValue(Value);
								}
						}

						xdoc.Save(XmlFileName);
				]]>
			</Code>
		</Task>
	</UsingTask>


</Project>
